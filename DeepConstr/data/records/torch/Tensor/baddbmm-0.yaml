args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - number
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - batch1
  - batch2
  - beta
  - alpha
  required:
  - true
  - true
  - true
  - false
  - false
name: torch.Tensor.baddbmm
package: torch
pass_rate: 0.0
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        alpha: int
        batch1: tensor
        batch2: tensor
        beta: int
        self: tensor
      msg: 'Input dtypes must be the same, got: input int, batch1: float, batch2:
        float'
      package: torch
    txt: dtype(self) == dtype(batch1)
  - f1_score: 68.54009595613434
    overall_score: 46.27004797806717
    precision: 100.0
    recall: 52.137643378519286
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        alpha: int
        batch1: tensor
        batch2: tensor
        beta: int
        self: tensor
      msg: 'Expected size for first two dimensions of batch2 tensor to be: [4, 1]
        but got: [8, 8].'
      package: torch
    txt: (((batch2.shape[0] == batch1.shape[0]) and (batch2.size(0) == 7)) or (batch2.shape[0]
      == 6)) and (batch2.size()[0] == batch1.size()[0] and batch2.size()[1] == batch1.size()[2])
  - f1_score: 65.86059743954482
    overall_score: 44.93029871977241
    precision: 92.60000000000001
    recall: 51.103752759381905
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        alpha: int
        batch1: tensor
        batch2: tensor
        beta: int
        self: tensor
      msg: Dimension specified as 0 but tensor has no dimensions
      package: torch
    txt: len(batch1) > 0
  - f1_score: 91.30434782608695
    overall_score: 57.65217391304348
    precision: 100.0
    recall: 84.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        alpha: int
        batch1: tensor
        batch2: tensor
        beta: int
        self: tensor
      msg: 'expand(torch.FloatTensor{[9, 9, 9, 7, 7]}, size=[7, 7, 8]): the number
        of sizes provided (3) must be greater or equal to the number of dimensions
        in the tensor (5)'
      package: torch
    txt: batch1.dim == batch2.dim
  - f1_score: 68.21282401091405
    overall_score: 46.106412005457024
    precision: 100.0
    recall: 51.75983436853002
- - cot: synthesized
    length: 1
    target:
      choosen_dtype:
        alpha: int
        batch1: tensor
        batch2: tensor
        beta: int
        self: tensor
      msg: Dimension out of range (expected to be in range of [-1, 0], but got 2)
      package: torch
    txt: '(\

      batch2.shape[1] == 8) and (batch1.shape[-1] == self.shape[-2])'
  - f1_score: 42.66666666666667
    overall_score: 33.333333333333336
    precision: 35.199999999999996
    recall: 54.15384615384616
