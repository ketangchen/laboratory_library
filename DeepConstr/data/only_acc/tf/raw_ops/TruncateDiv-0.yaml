args:
  dtype:
  - str
  - bfloat16,float16,float32,float64,uint8,int8,uint16,int16,int32,uint32,uint64,int64,complex64,complex128
  - bfloat16,float16,float32,float64,uint8,int8,uint16,int16,int32,uint32,uint64,int64,complex64,complex128
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.raw_ops.TruncateDiv
package: tensorflow
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__TruncateDiv_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [7,7,3,1] vs. [2,2,2,2,2] [Op:TruncateDiv] name: BHuy'
      package: tensorflow
    txt: (all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or y.shape[i] == 1 for i
      in range(-1, -min(len(x.shape), len(y.shape))-1, -1))) and (len(x) == len(y))
  - f1_score: 91.18541033434651
    overall_score: 100
    precision: 100.0
    recall: 83.79888268156425
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute TruncateDiv as input #1(zero-based) was expected to be
        a int32 tensor but is a float tensor [Op:TruncateDiv] name: HfzP'
      package: tensorflow
    txt: (dtype(y) == int32) and (dtype(y) == dtype(x))
  - f1_score: 68.18181818181819
    overall_score: 100
    precision: 100.0
    recall: 51.724137931034484
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__TruncateDiv_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [2] vs. [8] [Op:TruncateDiv] name: daJs'
      package: tensorflow
    txt: x.shape == y.shape
  - f1_score: 66.815144766147
    overall_score: 100
    precision: 100.0
    recall: 50.16722408026756
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: bfloat16,float16,float32,float64,uint8,int8,uint16,int16,int32,uint32,uint64,int64,complex64,complex128
        y: bfloat16,float16,float32,float64,uint8,int8,uint16,int16,int32,uint32,uint64,int64,complex64,complex128
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: bfloat16,float16,float32,float64,uint8,int8,uint16,int16,int32,uint32,uint64,int64,complex64,complex128
        y: bfloat16,float16,float32,float64,uint8,int8,uint16,int16,int32,uint32,uint64,int64,complex64,complex128
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
