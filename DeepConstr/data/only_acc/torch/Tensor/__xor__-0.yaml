args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.__xor__
package: torch
pass_rate: 94.88372093023256
rules:
- - cot: "Based on the given runtime information, the error occurs because the function\
      \ 'bitwise_xor_cpu' is not implemented for the data type 'Float'. To prevent\
      \ this error, the data types of both 'self' and 'other' tensors should be modified\
      \ to one of the allowed data types for the 'bitwise_xor_cpu' operation. The\
      \ allowed data types are 'half', 'int16', 'int32', 'int64', 'uint8', 'uint16',\
      \ 'uint32', 'uint64'. \n\nTherefore, the constraints to prevent this error are:"
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_xor_cpu" not implemented for ''Float'''
      package: torch
    txt: dtype(self) in ["half", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"] and dtype(other) in ["half", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]
  - f1_score: 93.03201506591336
    overall_score: 51.51600753295668
    precision: 100.0
    recall: 86.9718309859155
- - cot: The error is caused because the bitwise XOR operation is not implemented
      for tensors of type 'Half' (float16). To prevent this error, the tensors `self`
      and `other` should be of a compatible type, such as int8, int16, int32, int64,
      uint8, uint16, uint32, or uint64.
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_xor_cpu" not implemented for ''Half'''
      package: torch
    txt: '

      dtype(self) in ["int8", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"]'
  - f1_score: 89.87993138936535
    overall_score: 100
    precision: 100.0
    recall: 81.61993769470405
- - cot: 'Error is triggered because size of tensors at non-singleton dimension 0
      doesn''t match. What the args were? the two tensors matching problem at non-singleton
      dimension looks like broadcasting request. Broadcasting in tensor operations
      requires that the trailing dimensions of the tensors are either 1 or the same.
      We start from the last dimension because broadcasting aligns dimensions from
      the end. Therefore, we can revise the constraints as follows:'
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (8) must match the size of tensor b (9) at non-singleton
        dimension 0
      package: torch
    txt: self.shape[0] == other.shape[0]
  - f1_score: 70.03046708896828
    overall_score: 51.853211009174316
    precision: 97.70642201834863
    recall: 54.572472927270866
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
