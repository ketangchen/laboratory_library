args:
  dtype:
  - Tensor
  - str
  - List[int]
  - bool
  - None
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - ord
  - dim
  - keepdim
  - dtype
  required:
  - true
  - false
  - false
  - false
  - false
name: torch._C._linalg.linalg_matrix_norm
package: torch
pass_rate: 64.4
rules:
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        dim: list[int]
        dtype: None
        keepdim: bool
        ord: str
        self: tensor
      msg: 'linalg.matrix_norm: Order Hmtd not supported.'
      package: torch
    txt: ((ord == "Fro") or (ord in ["fro", "nuc"])) and ((ord == "Nuc") or (ord in
      ['fro', 'nuc', 'inf', 'ninf', '1', '2', '0']))
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error occurs because the `dim` argument is not a 2-tuple as expected.
      Instead, it contains the values [-2, -4, -3, -3, -3, -3, -3, -3, -3]. To prevent
      this error, the `dim` argument should be a 2-tuple. Therefore, the constraint
      can be formulated as follows:'
    length: 1
    target:
      choosen_dtype:
        dim: list[int]
        dtype: None
        keepdim: bool
        ord: str
        self: tensor
      msg: 'linalg.matrix_norm: dim must be a 2-tuple. Got -2 -4 -3 -3 -3 -3 -3 -3
        -3'
      package: torch
    txt: len(dim) == 2
  - f1_score: 98.3284169124877
    overall_score: 100
    precision: 100.0
    recall: 96.71179883945841
- - cot: 'Based on the given runtime information, the error occurs because the function
      `torch._C._linalg.linalg_matrix_norm` expects a floating point or complex tensor
      as input, but it received an integer tensor instead.


      To prevent this error, the input tensor `self` should be converted to a floating
      point or complex tensor. Therefore, the constraint that should be added is:'
    length: 1
    target:
      choosen_dtype:
        dim: list[int]
        dtype: None
        keepdim: bool
        ord: str
        self: tensor
      msg: 'linalg.matrix_norm: Expected a floating point or complex tensor as input.
        Got Int'
      package: torch
    txt: dtype(self) in [torch.float32, torch.float64, torch.complex64, torch.complex128]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "The error occurs because the dimension provided is out of the valid range.\
      \ The arguments related to this error are:\n- ord=nuc\n- out=Tensor<f32>[7,\
      \ 9, 8, 8, 8]\n- self=Tensor<f32>[9, 9, 9, 9]\n- dim=[29, 22]\n- keepdim=True\n\
      \nTo prevent this error in the future and generate constraints that do not trigger\
      \ it, we need to ensure that the \"dim\" values are always within the valid\
      \ range for the given tensors. If we denote the shape of the tensor \"self\"\
      \ as n, the valid range for the dimension would be [-n, n-1]. \n\nThe constraints\
      \ for the 'dim' parameter can be expressed as:"
    length: 1
    target:
      choosen_dtype:
        dim: list[int]
        dtype: None
        keepdim: bool
        ord: str
        self: tensor
      msg: Dimension out of range (expected to be in range of [-4, 3], but got 29)
      package: torch
    txt: ord == "nuc" and all(d >= -len(self.shape) and d < len(self.shape) for d
      in dim)
  - f1_score: 57.868020304568525
    overall_score: 37.2
    precision: 68.4
    recall: 50.146627565982406
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        dim: list[int]
        dtype: None
        keepdim: bool
        ord: str
        self: tensor
      msg: 'linalg.matrix_norm: dims must be different. Got (5, 5)'
      package: torch
    txt: ((self.shape[0] != self.shape[1]) or ((dim[0] != dim[1]))) and (self.dim()
      != dim[0] or self.dim() != dim[1])
  - f1_score: 74.57121551081283
    overall_score: 100
    precision: 100.0
    recall: 59.45303210463734
- - cot: 'Based on the given runtime information, the error is triggered because the
      input tensor `self` does not have at least 2 dimensions. To prevent the error,
      the constraint should be formulated as:'
    length: 1
    target:
      choosen_dtype:
        dim: list[int]
        dtype: None
        keepdim: bool
        ord: str
        self: tensor
      msg: 'linalg.matrix_norm: The input tensor A must have at least 2 dimensions.'
      package: torch
    txt: self.dim >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        dtype: None
        keepdim: bool
        ord: str
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        dtype: None
        keepdim: bool
        ord: str
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
