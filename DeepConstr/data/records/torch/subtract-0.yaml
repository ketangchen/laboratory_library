args:
  dtype:
  - Tensor
  - Tensor
  - number
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - alpha
  required:
  - true
  - true
  - false
name: torch.subtract
package: torch
pass_rate: 100
rules:
- - cot: "Error is triggered because the size of tensor a (self) (3) does not match\
      \ the size of tensor b (other) (8) at non-singleton dimension 6. \n\nTo prevent\
      \ this error, we need to ensure that the dimensions and shapes of both tensors\
      \ are consistent. \n\nTherefore, the constraint can be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        alpha: int
        other: tensor
        self: tensor
      msg: The size of tensor a (4) must match the size of tensor b (3) at non-singleton
        dimension 5
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 96.3455149501661
    overall_score: 60.17275747508305
    precision: 96.66666666666667
    recall: 96.02649006622516
- - cot: default
    length: 2
    target:
      choosen_dtype:
        alpha: number
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        alpha: number
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
