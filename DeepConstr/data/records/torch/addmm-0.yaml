args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - number
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - mat1
  - mat2
  - beta
  - alpha
  required:
  - true
  - true
  - true
  - false
  - false
name: torch.addmm
package: torch
pass_rate: 9.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: mat1 must be a matrix, got 4-D tensor
      package: torch
    txt: (mat1.ndim == 2) and (mat2.dim == 2)
  - f1_score: 96.38554216867469
    overall_score: 100
    precision: 100.0
    recall: 93.02325581395348
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: mat1 and mat2 shapes cannot be multiplied (3x6 and 2x8)
      package: torch
    txt: mat1.shape[1] == mat2.shape[0]
  - f1_score: 95.01187648456057
    overall_score: 100
    precision: 100.0
    recall: 90.49773755656109
- - cot: default
    length: 3
    target:
      choosen_dtype:
        alpha: number
        beta: number
        mat1: Tensor
        mat2: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in mat1.shape) and all(i
      >= 0 for i in mat2.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        alpha: number
        beta: number
        mat1: Tensor
        mat2: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and mat1.rank <= 7 and mat2.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
