args:
  dtype:
  - Tensor
  - int
  - Optional[int]
  - Optional[int]
  - Optional[Tensor]
  - bool
  - bool
  - Optional[bool]
  - Optional[int]
  - bool
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - n_fft
  - hop_length
  - win_length
  - window
  - center
  - normalized
  - onesided
  - length
  - return_complex
  required:
  - true
  - true
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
name: torch.Tensor.istft
package: torch
pass_rate: 0.33333333333333337
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        center: bool
        hop_length: int
        length: int
        n_fft: int
        normalized: bool
        onesided: None
        return_complex: bool
        self: tensor
        win_length: None
        window: None
      msg: istft requires a complex-valued input tensor matching the output from stft
        with return_complex=True.
      package: torch
    txt: self.dtype == torch.complex64
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        center: bool
        hop_length: None
        length: int
        n_fft: int
        normalized: bool
        onesided: bool
        return_complex: bool
        self: tensor
        win_length: None
        window: None
      msg: Dimension out of range (expected to be in range of [-1, 0], but got -2)
      package: torch
    txt: -2 >= -len(self.shape)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        center: bool
        hop_length: Optional[int]
        length: Optional[int]
        n_fft: int
        normalized: bool
        onesided: Optional[bool]
        return_complex: bool
        self: Tensor
        win_length: Optional[int]
        window: Optional[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in window.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        center: bool
        hop_length: Optional[int]
        length: Optional[int]
        n_fft: int
        normalized: bool
        onesided: Optional[bool]
        return_complex: bool
        self: Tensor
        win_length: Optional[int]
        window: Optional[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and window.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        center: bool
        hop_length: Optional[int]
        length: Optional[int]
        n_fft: int
        normalized: bool
        onesided: Optional[bool]
        return_complex: bool
        self: Tensor
        win_length: Optional[int]
        window: Optional[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in window.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        center: bool
        hop_length: Optional[int]
        length: Optional[int]
        n_fft: int
        normalized: bool
        onesided: Optional[bool]
        return_complex: bool
        self: Tensor
        win_length: Optional[int]
        window: Optional[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and window.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
