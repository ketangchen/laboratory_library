args:
  dtype:
  - Tensor
  - List[int]
  - bool
  - Optional[float]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - output_size
  - align_corners
  - scales
  - out
  required:
  - true
  - true
  - true
  - false
  - true
name: torch._C._nn.upsample_linear1d
package: torch
pass_rate: 55.12820512820513
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        out: tensor
        output_size: list[int]
        scales: None
        self: tensor
      msg: Non-empty 3D data tensor expected but got a tensor with sizes [0, 0, 5]
      package: torch
    txt: all(self[i]!=0 for i in range(1,len(self.shape)))
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error occurs because the ''out'' tensor''s data type is int, but the
      function expects a float data type. Therefore, the data type of the ''out''
      tensor should be float. So, Left : out.dtype, Op : ==, Right : dtype(self).'
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        out: tensor
        output_size: list[int]
        scales: None
        self: tensor
      msg: Expected out tensor to have dtype float, but got int instead
      package: torch
    txt: out.dtype == self.dtype
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        out: tensor
        output_size: list[int]
        scales: float
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: (out.rank==self.rank and all(out.shape[i]==self.shape[i] for i in range(out.rank)))
      or (all(self.shape[i]*scales==output_size[i] for i in range(self.rank)))
  - f1_score: 74.05181050522398
    overall_score: 43.02590525261199
    precision: 81.25
    recall: 68.02524322902971
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        align_corners: bool
        out: tensor
        output_size: list[int]
        scales: float
        self: tensor
      msg: 'Input and output sizes should be greater than 0, but got input (W: 1)
        and output (W: -3)'
      package: torch
    txt: (((self.shape[2] > 0) and (self.size(3) > 0 and output_size[0] > 0)) and
      (self.shape[2] > 0)) or (output_size[0] > 0)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        out: tensor
        output_size: list[int]
        scales: None
        self: tensor
      msg: It is expected output_size equals to 1, but got size 0
      package: torch
    txt: (len(output_size) == 1) and (len(self.shape) == 3)
  - f1_score: 96.2962962962963
    overall_score: 54.14814814814815
    precision: 100.0
    recall: 92.85714285714286
- - cot: default
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        out: Tensor
        output_size: List[int]
        scales: Optional[float]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        out: Tensor
        output_size: List[int]
        scales: Optional[float]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
