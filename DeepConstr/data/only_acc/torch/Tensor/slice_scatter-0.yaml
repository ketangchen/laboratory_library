args:
  dtype:
  - Tensor
  - Tensor
  - int
  - Optional[int]
  - Optional[int]
  - int
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - src
  - dim
  - start
  - end
  - step
  required:
  - true
  - true
  - false
  - false
  - false
  - false
name: torch.Tensor.slice_scatter
package: torch
pass_rate: 1.6666666666666667
rules:
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        end: Optional[int]
        self: Tensor
        src: Tensor
        start: Optional[int]
        step: int
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in src.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        end: Optional[int]
        self: Tensor
        src: Tensor
        start: Optional[int]
        step: int
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and src.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        end: Optional[int]
        self: Tensor
        src: Tensor
        start: Optional[int]
        step: int
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in src.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        end: Optional[int]
        self: Tensor
        src: Tensor
        start: Optional[int]
        step: int
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and src.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
