args:
  dtype:
  - Tensor
  - float
  - Optional[int]
  - bool
  - str
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - q
  - dim
  - keepdim
  - interpolation
  - out
  required:
  - true
  - true
  - false
  - false
  - false
  - true
name: torch.nanquantile
package: torch
pass_rate: 97.26962457337885
rules:
- - cot: 'The error message indicates that the `q` parameter should be in the range
      [0, 1], but it got a value of 8. To prevent this error, we need to ensure that
      the `q` value is within the valid range. The constraint for the `q` parameter
      can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        dim: None
        interpolation: str
        keepdim: bool
        out: tensor
        q: float
        self: tensor
      msg: quantile() q must be in the range [0, 1] but got 7
      package: torch
    txt: q >= 0 and q <= 1
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is caused because the interpolation value is not one of the expected
      options (linear, lower, higher, midpoint, or nearest). The provided interpolation
      value is "VjXv". To prevent this error, we need to ensure that the interpolation
      value is one of the expected options. The constraint for the "interpolation"
      parameter can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        dim: None
        interpolation: str
        keepdim: bool
        out: tensor
        q: float
        self: tensor
      msg: quantile() interpolation must be one of linear, lower, higher, midpoint
        or nearest, but got jOCN
      package: torch
    txt: '"interpolation" in ["linear", "lower", "higher", "midpoint", "nearest"]'
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        dim: int
        interpolation: str
        keepdim: bool
        out: tensor
        q: float
        self: tensor
      msg: Dimension out of range (expected to be in range of [-2, 1], but got 8)
      package: torch
    txt: ((dim >= -8) and (dim < 4)) and (dim >= -len(self.shape) and dim < len(self.shape))
  - f1_score: 73.89162561576354
    overall_score: 100
    precision: 100.0
    recall: 58.59375
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: None
        interpolation: str
        keepdim: bool
        out: tensor
        q: float
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 75.66204287515764
    overall_score: 100
    precision: 100.0
    recall: 60.85192697768763
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        interpolation: str
        keepdim: bool
        out: tensor
        q: float
        self: tensor
      msg: quantile() input tensor must be either float or double dtype
      package: torch
    txt: self.dtype == torch.float32
  - f1_score: 99.32659932659934
    overall_score: 61.66329966329967
    precision: 100.0
    recall: 98.66220735785953
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: None
        interpolation: str
        keepdim: bool
        out: tensor
        q: float
        self: tensor
      msg: quantile() out tensor must be same dtype as the input tensor
      package: torch
    txt: out.dtype == self.dtype
  - f1_score: 99.48542024013723
    overall_score: 61.742710120068615
    precision: 100.0
    recall: 98.97610921501708
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: Optional[int]
        interpolation: str
        keepdim: bool
        out: Tensor
        q: float
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: Optional[int]
        interpolation: str
        keepdim: bool
        out: Tensor
        q: float
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
