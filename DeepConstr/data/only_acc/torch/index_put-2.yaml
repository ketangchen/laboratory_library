args:
  dtype:
  - Tensor
  - List[Tensor]
  - Tensor
  - bool
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - indices
  - values
  - accumulate
  required:
  - true
  - true
  - true
  - false
name: torch.index_put
package: torch
pass_rate: 0.5
rules:
- - cot: "The error is triggered because the shape of the value tensor [3, 3, 3, 3]\
      \ cannot be broadcasted to the shape of the indexing result [1, 1]. \n\nTo prevent\
      \ this error, we need to ensure that the trailing dimensions of the value tensor\
      \ and the indexing result tensor are either the same or one of them is 1. We\
      \ can formulate this constraint as follows:"
    length: 1
    target:
      choosen_dtype:
        accumulate: bool
        indices: list[tensor]
        self: tensor
        values: tensor
      msg: 'shape mismatch: value tensor of shape [3, 3, 3, 3] cannot be broadcast
        to indexing result of shape [1, 1]'
      package: torch
    txt: all(self.shape[i] == values.shape[i] or self.shape[i] == 1 or values.shape[i]
      == 1 for i in range(-1, -min(len(self.shape), len(values.shape))-1, -1))
  - f1_score: 91.30434782608695
    overall_score: 50.25
    precision: 94.5
    recall: 88.3177570093458
- - cot: default
    length: 2
    target:
      choosen_dtype:
        accumulate: bool
        indices: List[Tensor]
        self: Tensor
        values: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in values.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        accumulate: bool
        indices: List[Tensor]
        self: Tensor
        values: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and values.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        accumulate: bool
        indices: List[Tensor]
        self: Tensor
        values: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in values.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        accumulate: bool
        indices: List[Tensor]
        self: Tensor
        values: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and values.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
