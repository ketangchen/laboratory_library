args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - tensor1
  - tensor2
  - value
  required:
  - true
  - true
  - true
  - false
name: torch.Tensor.addcmul
package: torch
pass_rate: 0.8
rules:
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        self: tensor
        tensor1: tensor
        tensor2: tensor
        value: int
      msg: The size of tensor a (4) must match the size of tensor b (6) at non-singleton
        dimension 5
      package: torch
    txt: (((all(self.shape[i] == tensor2.shape[i] or self.shape[i] == 1 or tensor2.shape[i]
      == 1 for i in range(-1, -min(len(self.shape), len(tensor2.shape))-1, -1))) and
      (all(tensor1.shape[i] == tensor2.shape[i] or tensor1.shape[i] == 1 or tensor2.shape[i]
      == 1 for i in range(-1, -min(len(tensor1.shape), len(tensor2.shape))-1, -1))))
      and (self.dim == tensor1.dim and self.shape == tensor1.shape)) and (tensor1.dim
      == tensor2.dim and tensor1.shape == tensor2.shape)
  - f1_score: 99.60159362549803
    overall_score: 100
    precision: 100.0
    recall: 99.20634920634922
- - cot: default
    length: 3
    target:
      choosen_dtype:
        self: Tensor
        tensor1: Tensor
        tensor2: Tensor
        value: number
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in tensor1.shape) and
      all(i >= 0 for i in tensor2.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        self: Tensor
        tensor1: Tensor
        tensor2: Tensor
        value: number
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and tensor1.rank <= 7 and tensor2.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        self: Tensor
        tensor1: Tensor
        tensor2: Tensor
        value: number
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in tensor1.shape) and
      all(i >= 0 for i in tensor2.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        self: Tensor
        tensor1: Tensor
        tensor2: Tensor
        value: number
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and tensor1.rank <= 7 and tensor2.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
