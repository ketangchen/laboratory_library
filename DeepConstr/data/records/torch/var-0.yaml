args:
  dtype:
  - Tensor
  - bool
  is_pos:
  - true
  - false
  name:
  - self
  - unbiased
  required:
  - true
  - false
name: torch.var
package: torch
pass_rate: 100
rules:
- - cot: 'The error is caused because the torch.var function only supports floating
      point and complex dtypes, but the input tensor has dtype i32. To prevent the
      error, the input tensor should have a floating point or complex dtype. Therefore,
      the constraint can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        unbiased: bool
      msg: std and var only support floating point and complex dtypes
      package: torch
    txt: self.dtype in [torch.float32, torch.float64, torch.complex64, torch.complex128]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        unbiased: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        unbiased: bool
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
