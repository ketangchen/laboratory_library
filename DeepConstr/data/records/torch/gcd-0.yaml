args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.gcd
package: torch
pass_rate: 91.33333333333333
rules:
- - cot: 'The error is due to the fact that the torch.gcd function is not implemented
      for tensors of type ''Half''. The ''other'' tensor is of type ''Half'' (Tensor<f16>),
      which is not compatible with the function. Therefore, a constraint should be
      added to ensure that the ''other'' tensor is not of type ''Half''. The constraint
      can be formulated as follows:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"gcd_cpu" not implemented for ''Half'''
      package: torch
    txt: dtype(other) != "half"
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Based on the given error message, the error arises because the function\
      \ torch.gcd does not have an implementation for the 'Float' data type. The tensors\
      \ 'self' and 'other' are both provided as float32, which is not compatible with\
      \ the 'Float' data type. \n\nTo prevent the error, the data type of 'self' and\
      \ 'other' should be changed to one of the allowed types for the torch.gcd function,\
      \ which are 'half', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32',\
      \ 'uint64'. \n\nThe constraint to prevent the error can be formulated as:"
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"gcd_cpu" not implemented for ''Float'''
      package: torch
    txt: dtype(self) in ["half", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"] and dtype(other) in ["half", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "The error is triggered because the size of tensor a (4) does not match the\
      \ size of tensor b (3) at non-singleton dimension 6. \n\nTo prevent this error,\
      \ we need to ensure that the dimensions and shape of the tensors are consistent.\
      \ \n\nThe constraint can be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (4) must match the size of tensor b (8) at non-singleton
        dimension 5
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 93.16770186335403
    overall_score: 58.58385093167701
    precision: 100.0
    recall: 87.20930232558139
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
