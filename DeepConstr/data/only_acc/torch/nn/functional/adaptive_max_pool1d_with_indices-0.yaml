args:
  dtype:
  - Tensor
  - List[int]
  - bool
  is_pos:
  - false
  - false
  - false
  name:
  - input
  - output_size
  - return_indices
  required:
  - true
  - true
  - false
name: torch.nn.functional.adaptive_max_pool1d_with_indices
package: torch
pass_rate: 100
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: adaptive_max_pool1d() argument 'output_size' should contain one int (got
        0)
      package: torch
    txt: len(output_size) == 1
  - f1_score: 72.28915662650601
    overall_score: 100
    precision: 100.0
    recall: 56.60377358490566
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'Expected 2 to 3 dimensions, but got 4-dimensional tensor for argument
        #1 ''self'' (while checking arguments for adaptive_max_pool1d)'
      package: torch
    txt: input.ndims() >= 2 and input.ndims() <= 3
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'Trying to create tensor with negative dimension -4: [3, 1, -4]'
      package: torch
    txt: (len(output_size)==1) and (all(output_size[i] >= 0 for i in range(len(output_size))))
  - f1_score: 99.8330550918197
    overall_score: 100
    precision: 100.0
    recall: 99.66666666666667
- - cot: 'The error occurs because the "adaptive_max_pool1d_with_indices" function
      expects the input tensor to be of float data type, but the provided input tensor
      is of int32 data type. To prevent this error, the data type of the input tensor
      should be float. Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: '"adaptive_max_pool2d" not implemented for ''Int'''
      package: torch
    txt: dtype(input) == torch.float32
  - f1_score: 98.19967266775778
    overall_score: 100
    precision: 100.0
    recall: 96.46302250803859
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'adaptive_max_pool1d(): Expected input to have non-zero size for non-batch
        dimensions, but input has sizes [8, 0] with dimension 1 being empty'
      package: torch
    txt: input.size(1) != 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        input: Tensor
        output_size: List[int]
        return_indices: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        input: Tensor
        output_size: List[int]
        return_indices: bool
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
