args:
  dtype:
  - Tensor
  - List[int]
  - bool
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - size
  - implicit
  required:
  - true
  - true
  - false
name: torch.Tensor.expand
package: torch
pass_rate: 7.6
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        implicit: bool
        self: tensor
        size: list[int]
      msg: 'The expanded size of the tensor (-3) must match the existing size (5)
        at non-singleton dimension 5.  Target sizes: [5, -4, -3, -3, -3, -3].  Tensor
        sizes: [5, 5, 5, 5]'
      package: torch
    txt: size[5] == 1
  - f1_score: 79.4912559618442
    overall_score: 100
    precision: 100.0
    recall: 65.96306068601582
- - cot: 'The error is triggered because the number of sizes provided is less than
      the number of dimensions in the tensor. To prevent this error, we need to ensure
      that the number of sizes provided is greater than or equal to the number of
      dimensions in the tensor. Therefore, the constraint would be:'
    length: 1
    target:
      choosen_dtype:
        implicit: bool
        self: tensor
        size: list[int]
      msg: 'expand(torch.FloatTensor{[1, 1]}, size=[]): the number of sizes provided
        (0) must be greater or equal to the number of dimensions in the tensor (2)'
      package: torch
    txt: len(size) >= self.dim()
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        implicit: bool
        self: tensor
        size: list[int]
      msg: 'numel: integer multiplication overflow'
      package: torch
    txt: (all(i >= -1 for i in size)) and (len(size) == self.dim())
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: Based on the given runtime information, the error occurs because the size
      of the expanded tensor is set to -1, which is not allowed in a leading, non-existing
      dimension 0. To prevent this error, we need to ensure that the size of the tensor
      expansion is a positive integer in dimension 0.
    length: 1
    target:
      choosen_dtype:
        implicit: bool
        self: tensor
        size: list[int]
      msg: The expanded size of the tensor (-1) isn't allowed in a leading, non-existing
        dimension 0
      package: torch
    txt: size[0] > 0
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        implicit: bool
        self: Tensor
        size: List[int]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        implicit: bool
        self: Tensor
        size: List[int]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
