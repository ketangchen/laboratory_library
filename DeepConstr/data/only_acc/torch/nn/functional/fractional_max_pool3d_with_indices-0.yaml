args:
  dtype:
  - Tensor
  - List[int]
  - Optional[List[int]]
  - Optional[List[float]]
  - bool
  - Optional[Tensor]
  is_pos:
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - input
  - kernel_size
  - output_size
  - output_ratio
  - return_indices
  - _random_samples
  required:
  - true
  - true
  - false
  - false
  - false
  - false
name: torch.nn.functional.fractional_max_pool3d_with_indices
package: torch
pass_rate: 1.5
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        _random_samples: None
        input: tensor
        kernel_size: list[int]
        output_ratio: list[float]
        output_size: None
        return_indices: bool
      msg: 'fractional_max_pool3d: kernel_size must either be a single Int or tuple
        of three Ints'
      package: torch
    txt: len(kernel_size) == 3
  - f1_score: 67.79661016949153
    overall_score: 100
    precision: 100.0
    recall: 51.28205128205129
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        _random_samples: None
        input: tensor
        kernel_size: list[int]
        output_ratio: None
        output_size: list[int]
        return_indices: bool
      msg: 'fractional_max_pool3d: output_size must either be a single Int or tuple
        of three Ints'
      package: torch
    txt: len(output_size) == 3
  - f1_score: 94.11764705882352
    overall_score: 100
    precision: 100.0
    recall: 88.88888888888889
- - cot: default
    length: 2
    target:
      choosen_dtype:
        _random_samples: Optional[Tensor]
        input: Tensor
        kernel_size: List[int]
        output_ratio: Optional[List[float]]
        output_size: Optional[List[int]]
        return_indices: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape) and all(i >= 0 for i in _random_samples.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        _random_samples: Optional[Tensor]
        input: Tensor
        kernel_size: List[int]
        output_ratio: Optional[List[float]]
        output_size: Optional[List[int]]
        return_indices: bool
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7 and _random_samples.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        _random_samples: Optional[Tensor]
        input: Tensor
        kernel_size: List[int]
        output_ratio: Optional[List[float]]
        output_size: Optional[List[int]]
        return_indices: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape) and all(i >= 0 for i in _random_samples.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        _random_samples: Optional[Tensor]
        input: Tensor
        kernel_size: List[int]
        output_ratio: Optional[List[float]]
        output_size: Optional[List[int]]
        return_indices: bool
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7 and _random_samples.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
