args:
  dtype:
  - Tensor
  - int
  - bool
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - dim
  - keepdim
  required:
  - true
  - true
  - false
name: torch.median
package: torch
pass_rate: 99.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: tensor
      msg: 'median(): Expected reduction dim 1 to have non-zero size.'
      package: torch
    txt: (self.shape[1] != 0) and (self.shape[dim] != 0)
  - f1_score: 66.4440734557596
    overall_score: 45.2220367278798
    precision: 99.5
    recall: 49.87468671679198
- - cot: 'Based on the given runtime information, the error occurred because the dimension
      provided (dim=3) is out of the valid range. To prevent this error in the future
      and generate constraints that do not trigger it, we need to ensure that the
      "dim" value is always within the valid range for the given tensor.


      The constraint for the ''dim'' parameter can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: tensor
      msg: Dimension out of range (expected to be in range of [-3, 2], but got 3)
      package: torch
    txt: dim >= -2 and dim < 0
  - f1_score: 74.07407407407409
    overall_score: 49.037037037037045
    precision: 100.0
    recall: 58.82352941176471
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
