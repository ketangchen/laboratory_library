args:
  dtype:
  - tensor
  - str
  is_pos:
  - false
  - false
  name:
  - x
  - name
  required:
  - true
  - false
name: tf.math.digamma
package: null
pass_rate: 100
rules:
- - cot: "Based on the given runtime information, the constraint to prevent the error\
      \ is to ensure that the data type of the input tensor `x` is one of the allowed\
      \ values: `bfloat16`, `half`, `float`, or `double`. \n\nThe correct formulation\
      \ of the constraint is:"
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
      msg: "Value for attr 'T' of int32 is not in the list of allowed values: bfloat16,\
        \ half, float, double\n\t; NodeDef: {{node Digamma}}; Op<name=Digamma; signature=x:T\
        \ -> y:T; attr=T:type,allowed=[DT_BFLOAT16, DT_HALF, DT_FLOAT, DT_DOUBLE]>\
        \ [Op:Digamma] name: ydLI"
      package: tensorflow
    txt: dtype(x) in ["bfloat16", "half", "float", "double"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is due to the input tensor `x` having a data type of `BFLOAT16`,
      which is not supported by the `tf.math.digamma` operation. To prevent this error,
      the input tensor `x` should have a data type that is supported by the `tf.math.digamma`
      operation, such as `float32` or `float64`. Therefore, the constraint to prevent
      this error is:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
      msg: "Could not find device for node: {{node Digamma}} = Digamma[T=DT_BFLOAT16]\n\
        All kernels registered for op Digamma:\n  device='XLA_CPU_JIT'; T in [DT_FLOAT,\
        \ DT_DOUBLE, DT_BFLOAT16, DT_HALF]\n  device='XLA_GPU_JIT'; T in [DT_FLOAT,\
        \ DT_DOUBLE, DT_BFLOAT16, DT_HALF]\n  device='GPU'; T in [DT_DOUBLE]\n  device='GPU';\
        \ T in [DT_FLOAT]\n  device='GPU'; T in [DT_HALF]\n  device='CPU'; T in [DT_DOUBLE]\n\
        \  device='CPU'; T in [DT_HALF]\n  device='CPU'; T in [DT_FLOAT]\n [Op:Digamma]\
        \ name: KAca"
      package: tensorflow
    txt: x.dtype in [tf.float32, tf.float64]
  - f1_score: 68.07866868381241
    overall_score: 100
    precision: 100.0
    recall: 51.60550458715596
- - cot: default
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
      msg: negative dimensions are not allowed
      package: null
    txt: all(i >= 0 for i in x.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
      msg: Too large tensor shape
      package: null
    txt: x.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
