args:
  dtype:
  - Tensor
  - int
  - number
  - number
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - bins
  - min
  - max
  - out
  required:
  - true
  - false
  - false
  - false
  - true
name: torch.histc
package: torch
pass_rate: 72.33333333333334
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        bins: int
        max: int
        min: int
        out: tensor
        self: tensor
      msg: 'torch.histc: max must be larger than min'
      package: torch
    txt: max > min
  - f1_score: 69.36416184971098
    overall_score: 100
    precision: 100.0
    recall: 53.09734513274337
- - cot: 'The error occurs because the value of the `bins` parameter is less than
      or equal to 0. To prevent this error, we need to ensure that the `bins` value
      is always greater than 0. The constraint for the `bins` parameter can be expressed
      as:'
    length: 1
    target:
      choosen_dtype:
        bins: int
        max: int
        min: int
        out: tensor
        self: tensor
      msg: 'torch.histogram(): bins must be > 0, but got -3 for dimension 0'
      package: torch
    txt: bins > 0
  - f1_score: 96.15384615384615
    overall_score: 100
    precision: 100.0
    recall: 92.59259259259258
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        bins: int
        max: int
        min: int
        out: tensor
        self: tensor
      msg: 'torch.histogram: input tensor and hist tensor should have the same dtype,
        but got input float and hist int'
      package: torch
    txt: self.dtype == out.dtype
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        bins: int
        max: int
        min: int
        out: tensor
        self: tensor
      msg: '"histogram_cpu" not implemented for ''Int'''
      package: torch
    txt: (dtype(out) == dtype(self)) and (dtype(out) == "float")
  - f1_score: 95.08716323296355
    overall_score: 100
    precision: 100.0
    recall: 90.6344410876133
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        bins: int
        max: int
        min: int
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank
  - f1_score: 65.91166477916195
    overall_score: 51.5
    precision: 97.0
    recall: 49.914236706689536
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        bins: int
        max: int
        min: int
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 57.59036144578313
    overall_score: 42.83333333333333
    precision: 79.66666666666666
    recall: 45.09433962264151
- - cot: default
    length: 2
    target:
      choosen_dtype:
        bins: int
        max: number
        min: number
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        bins: int
        max: number
        min: number
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
