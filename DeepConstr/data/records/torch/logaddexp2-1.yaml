args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.logaddexp2
package: torch
pass_rate: 97.97979797979798
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (8) must match the size of tensor b (9) at non-singleton
        dimension 2
      package: torch
    txt: other.shape[2] == 1
  - f1_score: 86.58008658008657
    overall_score: 100
    precision: 100.0
    recall: 76.33587786259541
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 73.78277153558054
    overall_score: 52.25
    precision: 98.5
    recall: 58.982035928143716
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: '"logaddexp2_cpu" not implemented for ''Int'''
      package: torch
    txt: (self.dtype in ["Float", "Double"] and other.dtype in ["Float", "Double"])
      or (self.dtype != torch.int and other.dtype != torch.int and out.dtype != torch.int)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (dtype(other) == dtype(out)) and (dtype(out)==dtype(self))
  - f1_score: 85.1063829787234
    overall_score: 48.5531914893617
    precision: 100.0
    recall: 74.07407407407408
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape) and
      all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
