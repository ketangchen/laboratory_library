args:
  dtype:
  - Tensor
  - List[int]
  is_pos:
  - true
  - false
  name:
  - self
  - size
  required:
  - true
  - true
name: torch.broadcast_to
package: torch
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'The expanded size of the tensor (1) must match the existing size (4) at
        non-singleton dimension 8.  Target sizes: [2, 1, 9, 1, 1, 1, 1, 1, 1].  Tensor
        sizes: [4]'
      package: torch
    txt: (self.size[0] == 1) and (self.dim() == len(size) and all(self.shape[i] ==
      size[i] or self.shape[i] == 1 or size[i] == 1 for i in range(-1, -self.dim()-1,
      -1)))
  - f1_score: 87.27810650887572
    overall_score: 49.63905325443786
    precision: 98.33333333333333
    recall: 78.45744680851064
- - cot: 'Based on given values, Error is triggered because the size is negative and
      it''s causing an integer overflow in the calculation of the total number of
      elements. The size of the tensor should always be positive. Let''s see what
      the args were. The size parameter should be a list of positive integers, so
      size should be corrected. Therefore, Left : size. Op : >, and Right : 0'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'numel: integer multiplication overflow'
      package: torch
    txt: all(i > 0 for i in size)
  - f1_score: 69.52491309385864
    overall_score: 100
    precision: 100.0
    recall: 53.285968028419184
- - cot: 'The error is triggered because the number of sizes provided (0) must be
      greater or equal to the number of dimensions in the tensor (2). To prevent this
      error, we can formulate the constraint as follows:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'expand(torch.FloatTensor{[1, 1]}, size=[]): the number of sizes provided
        (0) must be greater or equal to the number of dimensions in the tensor (2)'
      package: torch
    txt: len(size) >= self.dim
  - f1_score: 69.12442396313365
    overall_score: 100
    precision: 100.0
    recall: 52.816901408450704
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        size: List[int]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        size: List[int]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
