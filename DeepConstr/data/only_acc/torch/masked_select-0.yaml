args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - mask
  required:
  - true
  - true
name: torch.masked_select
package: torch
pass_rate: 100
rules:
- - cot: "`torch.masked_select` expects a boolean mask tensor as the `mask` argument.\
      \ However, in the given runtime information, the `mask` tensor is of type `f32`.\
      \ \n\nTo prevent this error, the `mask` tensor should be converted to a boolean\
      \ tensor. So, the data type of the `mask` tensor should be `bool`. \n\nTherefore,\
      \ the constraint to prevent the error is:"
    length: 1
    target:
      choosen_dtype:
        mask: tensor
        self: tensor
      msg: 'masked_select: expected BoolTensor for mask'
      package: torch
    txt: dtype(mask) == bool
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Error is triggered because the size of tensor a (7) must match the size\
      \ of tensor b (6) at non-singleton dimension 2. \n\nLet's see what the args\
      \ were. The mask tensor has a shape of [5, 7] and the self tensor has a shape\
      \ of [1, 6, 6]. \n\nTo prevent the error, we need to ensure that the size of\
      \ tensor a matches the size of tensor b at non-singleton dimension 2. \n\nTherefore,\
      \ the constraint can be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        mask: tensor
        self: tensor
      msg: The size of tensor a (6) must match the size of tensor b (7) at non-singleton
        dimension 3
      package: torch
    txt: mask.shape[1] == self.shape[2]
  - f1_score: 74.21150278293136
    overall_score: 100
    precision: 100.0
    recall: 58.99705014749264
- - cot: default
    length: 2
    target:
      choosen_dtype:
        mask: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in mask.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        mask: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and mask.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
