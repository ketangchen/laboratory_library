args:
  dtype:
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - str
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - bias
  - data_format
  - name
  - value
  required:
  - true
  - false
  - false
  - true
name: tf.raw_ops.BiasAdd
package: tensorflow
pass_rate: 9.5
rules:
- - cot: 'Based on the given runtime information, the error message states that the
      number of biases provided (1) does not match the last dimension of the input
      tensor (3). To prevent this error, we need to ensure that the number of biases
      matches the last dimension of the input tensor. Therefore, the constraint can
      be formulated as follows:'
    length: 1
    target:
      choosen_dtype:
        bias: tensor
        data_format: str
        name: str
        value: tensor
      msg: '{{function_node __wrapped__BiasAdd_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Must provide as many biases as the last dimension of the input tensor: [1]
        vs. [1,8] [Op:BiasAdd] name: tZoh'
      package: tensorflow
    txt: shape(bias)[-1] == shape(value)[-1]
  - f1_score: 17.16738197424893
    overall_score: 20.583690987124463
    precision: 10.0
    recall: 60.60606060606061
- - cot: synthesized
    length: 5
    target:
      choosen_dtype:
        bias: tensor
        data_format: str
        name: str
        value: tensor
      msg: 'cannot compute BiasAdd as input #1(zero-based) was expected to be a float
        tensor but is a int32 tensor [Op:BiasAdd] name: eQhW'
      package: tensorflow
    txt: ((dtype(bias) == int32) or (dtype(bias) == dtype(value))) and (((dtype(bias)
      == float32) or (dtype(bias) == int32)) and (dtype(bias) == float))
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "The error is triggered because the input tensor `value` must be at least\
      \ 2D, but it has no dimensions (empty tensor).\n\nTo prevent the error, the\
      \ input tensor `value` should have at least 2 dimensions. \n\nWrap the final\
      \ formula with"
    length: 1
    target:
      choosen_dtype:
        bias: tensor
        data_format: str
        name: str
        value: tensor
      msg: '{{function_node __wrapped__BiasAdd_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Input tensor must be at least 2D: [] [Op:BiasAdd] name: dRjl'
      package: tensorflow
    txt: value.dim >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: Based on the given runtime information, the error is triggered because the
      bias tensor is not 1D. The bias tensor should be a 1D tensor, but it has dimensions
      [7, 8, 8, 3, 8, 6, 8]. Therefore, to prevent the error, the bias tensor should
      be reshaped to have only one dimension.
    length: 1
    target:
      choosen_dtype:
        bias: tensor
        data_format: str
        name: str
        value: tensor
      msg: '{{function_node __wrapped__BiasAdd_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Biases must be 1D: [] [Op:BiasAdd] name: oMoD'
      package: tensorflow
    txt: bias.dim == 1
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: Based on the given runtime information, the error is caused by an incorrect
      value for the 'data_format' attribute. The provided value is "duqB", which is
      not in the allowed values of "NHWC" or "NCHW". To prevent this error, the 'data_format'
      attribute should be corrected to be either "NHWC" or "NCHW".
    length: 1
    target:
      choosen_dtype:
        bias: tensor
        data_format: str
        name: str
        value: tensor
      msg: "Value for attr 'data_format' of \"pZaa\" is not in the list of allowed\
        \ values: \"NHWC\", \"NCHW\"\n\t; NodeDef: {{node BiasAdd}}; Op<name=BiasAdd;\
        \ signature=value:T, bias:T -> output:T; attr=T:type,allowed=[DT_FLOAT, DT_DOUBLE,\
        \ DT_INT32, DT_UINT8, DT_INT16, 10440210506161272279, DT_UINT16, DT_COMPLEX128,\
        \ DT_HALF, DT_UINT32, DT_UINT64]; attr=data_format:string,default=\"NHWC\"\
        ,allowed=[\"NHWC\", \"NCHW\"]> [Op:BiasAdd] name: zgOS"
      package: tensorflow
    txt: '"data_format" in ["NHWC", "NCHW"]'
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        bias: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        data_format: str
        name: str
        value: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in bias.shape) and all(i >= 0 for i in value.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        bias: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        data_format: str
        name: str
        value: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: bias.rank <= 7 and value.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
