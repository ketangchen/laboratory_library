args:
  dtype:
  - Tensor
  - List[int]
  - bool
  - Optional[float]
  - Optional[float]
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - output_size
  - align_corners
  - scales_h
  - scales_w
  required:
  - true
  - true
  - true
  - false
  - false
name: torch._C._nn.upsample_bicubic2d
package: torch
pass_rate: 94.96644295302013
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales_h: float
        scales_w: float
        self: tensor
      msg: Non-empty 4D data tensor expected but got a tensor with sizes [7, 0, 8,
        9]
      package: torch
    txt: self.shape[1] != 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales_h: float
        scales_w: None
        self: tensor
      msg: '"compute_indices_weights_cubic" not implemented for ''ComplexFloat'''
      package: torch
    txt: (self.ndim() == 4) and (scales_h != 0.0) and (self.dtype() != 'ComplexFloat')
  - f1_score: 98.8391376451078
    overall_score: 61.4195688225539
    precision: 100.0
    recall: 97.70491803278689
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales_h: None
        scales_w: float
        self: tensor
      msg: '"compute_indices_weights_cubic" not implemented for ''Long'''
      package: torch
    txt: (((output_size[1] > 0)) and (self.dtype != 'Long')) or (self.dtype in ['float',
      'double', 'half', 'complex'])
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales_h: None
        scales_w: None
        self: tensor
      msg: '"compute_indices_weights_cubic" not implemented for ''Int'''
      package: torch
    txt: dtype(self) != int32
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales_h: None
        scales_w: None
        self: tensor
      msg: 'Input and output sizes should be greater than 0, but got input (H: 7,
        W: 8) output (H: -3, W: 3)'
      package: torch
    txt: ((output_size[0] > 0 and output_size[1] > 0) and (self.shape[2]>0 and self.shape[3]>0
      and output_size[0]>0 and output_size[1]>0)) and (output_size[0] > 0 and output_size[1]
      > 0)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales_h: float
        scales_w: None
        self: tensor
      msg: It is expected output_size equals to 2, but got size 0
      package: torch
    txt: (len(output_size) == 2) and (len(self.size()) == 4)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: List[int]
        scales_h: Optional[float]
        scales_w: Optional[float]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: List[int]
        scales_h: Optional[float]
        scales_w: Optional[float]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
