args:
  dtype:
  - bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - bool
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  - false
  - false
  name:
  - align_corners
  - grads
  - half_pixel_centers
  - name
  - original_image
  required:
  - false
  - true
  - false
  - false
  - true
name: tf.raw_ops.ResizeBilinearGrad
package: tensorflow
pass_rate: 100
rules:
- - cot: 'The error is triggered because the input_grad tensor is not 4-dimensional.
      Let''s see what the args were. The grads tensor was inputted which has no dimensions.
      However, for the function to work properly, it needs to be 4-dimensional. Therefore,
      the Left : grads.dim must be corrected. Ops : ''=='', Right : 4.'
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: '{{function_node __wrapped__ResizeBilinearGrad_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        input_grad must be 4-dimensional[4,4] [Op:ResizeBilinearGrad] name: gBOX'
      package: tensorflow
    txt: grads.dim == 4
  - f1_score: 85.9598853868195
    overall_score: 100
    precision: 100.0
    recall: 75.37688442211056
- - cot: The error is triggered because the original_image tensor has 5 dimensions
      [1, 9, 3, 6, 9] instead of the required 4 dimensions. To resolve the error,
      the original_image tensor should be 4-dimensional.
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: '{{function_node __wrapped__ResizeBilinearGrad_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        original_image must be 4-dimensional[8,7,7,7,7] [Op:ResizeBilinearGrad] name:
        UITs'
      package: tensorflow
    txt: original_image.dim == 4
  - f1_score: 84.98583569405099
    overall_score: 100
    precision: 100.0
    recall: 73.89162561576354
- - cot: If half_pixel_centers is True, align_corners must be False.
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: '{{function_node __wrapped__ResizeBilinearGrad_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        If half_pixel_centers is True, align_corners must be False. [Op:ResizeBilinearGrad]
        name: aQii'
      package: tensorflow
    txt: (half_pixel_centers == False)
  - f1_score: 80.34188034188034
    overall_score: 100
    precision: 100.0
    recall: 67.14285714285715
- - cot: 'Based on the given error message, the error occurs because the input tensor
      `grads` is expected to be a float tensor, but it is actually an int32 tensor.
      To prevent this error, the data type of tensor `grads` should be changed to
      float. Therefore, the constraint that prevents the error is:


      `dtype(grads) == float32`


      Wrap the final formula with `'
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: 'cannot compute ResizeBilinearGrad as input #0(zero-based) was expected
        to be a float tensor but is a int32 tensor [Op:ResizeBilinearGrad] name: fpeZ'
      package: tensorflow
    txt: dtype(grads) == float32
  - f1_score: 97.65886287625419
    overall_score: 100
    precision: 100.0
    recall: 95.42483660130719
- - cot: Based on the given runtime information, the error arises because the attribute
      'original_image' is provided as int32, but it is expected to be one of float,
      bfloat16, half, double. Therefore, the attribute 'original_image' should be
      corrected to match one of the allowed types.
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: "Value for attr 'T' of int32 is not in the list of allowed values: float,\
        \ bfloat16, half, double\n\t; NodeDef: {{node ResizeBilinearGrad}}; Op<name=ResizeBilinearGrad;\
        \ signature=grads:float, original_image:T -> output:T; attr=T:type,allowed=[DT_FLOAT,\
        \ DT_BFLOAT16, DT_HALF, DT_DOUBLE]; attr=align_corners:bool,default=false;\
        \ attr=half_pixel_centers:bool,default=false> [Op:ResizeBilinearGrad] name:\
        \ ETeW"
      package: tensorflow
    txt: dtype(original_image) in ["float", "bfloat16", "half", "double"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: '{{function_node __wrapped__ResizeBilinearGrad_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        resized dimensions must be positive [Op:ResizeBilinearGrad] name: rjNf'
      package: tensorflow
    txt: (grads.dim > 0) and (all(i > 0 for i in grads.shape))
  - f1_score: 85.71428571428571
    overall_score: 100
    precision: 100.0
    recall: 75.0
- - cot: 'original_image dimensions must be positive. Therefore, the constraint can
      be formulated as:'
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        grads: tensor
        half_pixel_centers: bool
        name: str
        original_image: tensor
      msg: '{{function_node __wrapped__ResizeBilinearGrad_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        original dimensions must be positive [Op:ResizeBilinearGrad] name: WtYJ'
      package: tensorflow
    txt: (i > 0 for i in original_image.shape)
  - f1_score: 86.86868686868686
    overall_score: 100
    precision: 100.0
    recall: 76.78571428571428
- - cot: default
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        grads: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        half_pixel_centers: bool
        name: str
        original_image: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in grads.shape) and all(i >= 0 for i in original_image.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        grads: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        half_pixel_centers: bool
        name: str
        original_image: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: grads.rank <= 7 and original_image.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
