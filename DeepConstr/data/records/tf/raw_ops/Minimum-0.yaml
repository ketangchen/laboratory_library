args:
  dtype:
  - str
  - bfloat16,float16,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64
  - bfloat16,float16,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.raw_ops.Minimum
package: tensorflow
pass_rate: 83.5
rules:
- - cot: 'Based on the given runtime information, the error occurs because the function
      is trying to perform the Minimum operation on an int32 tensor and a float tensor.
      However, both tensors must have the same data type in order to perform the operation.
      Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute Minimum as input #1(zero-based) was expected to be a int32
        tensor but is a float tensor [Op:Minimum] name: silH'
      package: tensorflow
    txt: dtype(x) == dtype(y)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is caused because the shapes of x and y are incompatible. Let''s
      see what the args were. The shape of x is [2, 7, 5, 8, 5, 5] and the shape of
      y is [7, 5, 2, 1, 3, 4, 9]. To prevent this error, the shapes of x and y should
      be broadcastable. Broadcasting requires that the trailing dimensions of the
      tensors are either 1 or the same. So, the constraint should be that for each
      dimension starting from the last, the size of the dimension in x should be equal
      to the size of the dimension in y or one of them should be 1. We start from
      the last dimension because broadcasting aligns dimensions from the end. Therefore,
      we can formulate the constraint as follows:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__Minimum_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [3,3,3,3] vs. [1,8,2,9,8] [Op:Minimum] name: XdBU'
      package: tensorflow
    txt: all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or y.shape[i] == 1 for i
      in range(-1, -min(len(x.shape), len(y.shape))-1, -1))
  - f1_score: 95.62982005141389
    overall_score: 59.81491002570694
    precision: 93.0
    recall: 98.4126984126984
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: bfloat16,float16,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64
        y: bfloat16,float16,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: bfloat16,float16,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64
        y: bfloat16,float16,float32,float64,int8,uint8,int16,uint16,int32,uint32,int64,uint64
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
