args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.max
package: torch
pass_rate: 100
rules:
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: ((dtype(self) == dtype(out)) or (dtype(self) == int32)) and (dtype(self)==dtype(other))
  - f1_score: 94.615591990785
    overall_score: 53.3077959953925
    precision: 97.0
    recall: 92.34559632588625
- - cot: 'Error is triggered because the size of tensors at non-singleton dimension
      3 doesn''t match. What the args were? the two tensors matching problem at non-singleton
      dimension looks like broadcasting request. Broadcasting in tensor operations
      requires that the trailing dimensions of the tensors are either 1 or the same.
      We start from the last dimension because broadcasting aligns dimensions from
      the end. Therefore, we can revise the constraints as follows:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (3) must match the size of tensor b (5) at non-singleton
        dimension 6
      package: torch
    txt: all(self.shape[i] == other.shape[i] or self.shape[i] == 1 or other.shape[i]
      == 1 for i in range(-1, -min(len(self.shape), len(other.shape))-1, -1))
  - f1_score: 91.87935034802784
    overall_score: 100
    precision: 100.0
    recall: 84.9785407725322
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: (out.rank == self.rank) and (other.rank == out.rank and all(other.shape[i]
      == out.shape[i] for i in range(other.rank)))
  - f1_score: 68.52589641434264
    overall_score: 46.26294820717132
    precision: 86.0
    recall: 56.95364238410596
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (5) must match the size of tensor b (3) at non-singleton
        dimension 0
      package: torch
    txt: self.shape == other.shape
  - f1_score: 67.22972972972973
    overall_score: 45.61486486486486
    precision: 100.0
    recall: 50.63613231552163
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape) and
      all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
