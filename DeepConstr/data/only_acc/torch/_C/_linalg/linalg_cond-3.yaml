args:
  dtype:
  - Tensor
  - str
  is_pos:
  - true
  - false
  name:
  - self
  - p
  required:
  - true
  - true
name: torch._C._linalg.linalg_cond
package: torch
pass_rate: 99.33333333333333
rules:
- - cot: 'The error is triggered because the input `A` is expected to be batches of
      square matrices, but in this case, it has shape [4, 6]. To prevent this error,
      we need to ensure that `A` is a batch of square matrices. The constraint can
      be expressed as:'
    length: 1
    target:
      choosen_dtype:
        p: str
        self: tensor
      msg: 'linalg.cond(ord=GeWE): A must be batches of square matrices, but they
        are 8 by 7 matrices'
      package: torch
    txt: all(self.shape[i] == self.shape[i+1] for i in range(len(self.shape)-1))
  - f1_score: 69.12442396313365
    overall_score: 100
    precision: 100.0
    recall: 52.816901408450704
- - cot: 'Based on the given runtime information, the error is triggered because the
      input tensor `A` does not have at least 2 dimensions. To prevent this error,
      the constraint should be formulated as follows:'
    length: 1
    target:
      choosen_dtype:
        p: str
        self: tensor
      msg: 'linalg.cond(ord=ejFR): The input tensor A must have at least 2 dimensions.'
      package: torch
    txt: self.dim >= 2
  - f1_score: 98.36065573770492
    overall_score: 100
    precision: 100.0
    recall: 96.77419354838709
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        p: str
        self: tensor
      msg: 'linalg.cond got an invalid norm type: OTeF'
      package: torch
    txt: (p in [None, 'fro', 'inf', '-inf']) and (p in ['fro', 'nuc', 'inf', '1'])
  - f1_score: 69.83471074380166
    overall_score: 29.666666666666668
    precision: 56.333333333333336
    recall: 91.84782608695652
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        p: str
        self: tensor
      msg: 'linalg.cond got an invalid norm type: inf'
      package: torch
    txt: p == "fro"
  - f1_score: 98.6842105263158
    overall_score: 100
    precision: 100.0
    recall: 97.40259740259741
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        p: str
        self: tensor
      msg: 'linalg.cond: Expected result to be safely castable from Float dtype, but
        got result with dtype Int'
      package: torch
    txt: dtype(out) == dtype(self)
  - f1_score: 95.52715654952077
    overall_score: 100
    precision: 100.0
    recall: 91.43730886850153
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        p: str
        self: tensor
      msg: 'linalg.inv: Low precision dtypes not supported. Got Half'
      package: torch
    txt: (dtype(self) in ["float16", "float32", "float64"]) and (dtype(self) != "Half")
  - f1_score: 99.66666666666666
    overall_score: 100
    precision: 100.0
    recall: 99.33554817275747
- - cot: default
    length: 1
    target:
      choosen_dtype:
        p: str
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        p: str
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
