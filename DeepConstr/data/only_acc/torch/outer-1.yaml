args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - vec2
  required:
  - true
  - true
name: torch.outer
package: torch
pass_rate: 97.36842105263158
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        self: tensor
        vec2: tensor
      msg: 'outer: Expected 1-D argument self, but got 2-D'
      package: torch
    txt: (self.ndims() == 1) and (vec2.ndims() == 1)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        self: tensor
        vec2: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: (out.rank==self.rank and all(out.shape[i]==self.shape[i] for i in range(out.rank)))
      or (all(out.shape[i] == vec2.shape[i] for i in range(out.rank)))
  - f1_score: 61.38011899074999
    overall_score: 33.95614035087719
    precision: 64.91228070175438
    recall: 58.21252059308073
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        self: tensor
        vec2: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: ((all(out.shape[i]==self.shape[i] for i in range(out.rank))) or (out.shape[0]
      == self.shape[0] and out.shape[0] == vec2.shape[0])) or (out.rank==2 and out.shape[0]==self.shape[0]
      and out.shape[1]==vec2.shape[0])
  - f1_score: 55.05251720391163
    overall_score: 22.839080459770116
    precision: 43.67816091954023
    recall: 74.43682664054847
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        self: tensor
        vec2: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (((dtype(self) == float32)) or (dtype(self) == dtype(vec2))) and (dtype(out)==dtype(self))
  - f1_score: 78.26086956521738
    overall_score: 100
    precision: 100.0
    recall: 64.28571428571428
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        vec2: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in vec2.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        vec2: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and vec2.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
