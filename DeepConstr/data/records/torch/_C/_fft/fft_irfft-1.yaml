args:
  dtype:
  - Tensor
  - Optional[int]
  - int
  - Optional[str]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - n
  - dim
  - norm
  - out
  required:
  - true
  - false
  - false
  - false
  - true
name: torch._C._fft.fft_irfft
package: torch
pass_rate: 6.333333333333334
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: Dimension out of range (expected to be in range of [-2, 1], but got 4)
      package: torch
    txt: dim >= -len(self.shape)
  - f1_score: 67.47868453105968
    overall_score: 49.166666666666664
    precision: 92.33333333333333
    recall: 53.16698656429942
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        out: tensor
        self: tensor
      msg: Dimension specified as 8 but tensor has no dimensions
      package: torch
    txt: 0 <= dim < len(self.shape)
  - f1_score: 69.04487917146145
    overall_score: 100
    precision: 100.0
    recall: 52.72407732864676
- - cot: 'The error is triggered because the number of data points specified, `n=0`,
      is invalid. To prevent this error, we need to ensure that the value of `n` is
      greater than 0. The constraint for the `n` parameter can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        out: tensor
        self: tensor
      msg: Invalid number of data points (0) specified
      package: torch
    txt: n > 0
  - f1_score: 83.21775312066575
    overall_score: 100
    precision: 100.0
    recall: 71.25890736342043
- - cot: 'The error indicates that the ''out'' tensor is being resized, but it is
      not resizable. To prevent this error, the shape of the ''out'' tensor should
      match the shape of the operation result, which is determined by the ''self''
      tensor. Therefore, the following constraint can be formulated:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 67.5
    overall_score: 52.5
    precision: 99.0
    recall: 51.206896551724135
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: str
        out: tensor
        self: tensor
      msg: irfft expects a floating point output tensor, but got Int
      package: torch
    txt: (dtype(out) == dtype(self)) and (dtype(out) == Float)
  - f1_score: 89.65517241379311
    overall_score: 100
    precision: 100.0
    recall: 81.25
- - cot: 'The error is due to an invalid normalization mode. The value provided for
      ''norm'' is "RuUP", which is not in the allowed values: "FULL", "VALID", "CAUSAL".
      Therefore, dtype(norm) should be corrected to be either "FULL", "VALID", or
      "CAUSAL", which is ["FULL", "VALID", "CAUSAL"].'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: 'Invalid normalization mode: "RuUP"'
      package: torch
    txt: norm in ["FULL", "VALID", "CAUSAL"]
  - f1_score: 86.1671469740634
    overall_score: 100
    precision: 100.0
    recall: 75.69620253164557
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
