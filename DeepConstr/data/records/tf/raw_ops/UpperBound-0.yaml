args:
  dtype:
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - sorted_inputs
  - values
  required:
  - false
  - true
  - true
name: tf.raw_ops.UpperBound
package: tensorflow
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        sorted_inputs: tensor
        values: tensor
      msg: '{{function_node __wrapped__UpperBound_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Leading dim_size of both tensors must match. [Op:UpperBound] name: Trcb'
      package: tensorflow
    txt: (sorted_inputs.shape[0] == values.shape[0]) and (sorted_inputs.dim(0) ==
      values.dim(0))
  - f1_score: 70.09646302250805
    overall_score: 37.833333333333336
    precision: 72.66666666666667
    recall: 67.70186335403727
- - cot: 'Based on the given runtime information, the error occurs because the function
      `tf.raw_ops.UpperBound` expects the first input to be a float tensor, but it
      is receiving an int32 tensor.


      To prevent this error, the data type of the first input should be corrected.
      It should be a float tensor, which means the data type of the first input should
      be equal to the data type of the second input.


      Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        name: str
        sorted_inputs: tensor
        values: tensor
      msg: 'cannot compute UpperBound as input #1(zero-based) was expected to be a
        int32 tensor but is a float tensor [Op:UpperBound] name: FRLB'
      package: tensorflow
    txt: dtype(values) == dtype(sorted_inputs)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        name: str
        sorted_inputs: tensor
        values: tensor
      msg: '{{function_node __wrapped__UpperBound_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Leading dim_size of both tensors must match. [Op:UpperBound] name: cnLl'
      package: tensorflow
    txt: len(values.shape) > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: The error is triggered because the sorted_inputs argument of tf.raw_ops.UpperBound
      must be a matrix. To prevent the error, the sorted_inputs tensor should have
      two dimensions.
    length: 1
    target:
      choosen_dtype:
        name: str
        sorted_inputs: tensor
        values: tensor
      msg: '{{function_node __wrapped__UpperBound_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        sorted input argument must be a matrix [Op:UpperBound] name: LzEr'
      package: tensorflow
    txt: sorted_inputs.dim == 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        sorted_inputs: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        values: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in sorted_inputs.shape) and all(i >= 0 for i in values.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        sorted_inputs: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        values: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: sorted_inputs.rank <= 7 and values.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
