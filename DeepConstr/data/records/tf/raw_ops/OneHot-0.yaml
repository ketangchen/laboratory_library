args:
  dtype:
  - int
  - int
  - uint8,int8,int32,int64
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - axis
  - depth
  - indices
  - name
  - off_value
  - on_value
  required:
  - false
  - true
  - true
  - false
  - true
  - true
name: tf.raw_ops.OneHot
package: tensorflow
pass_rate: 100
rules:
- - cot: 'Based on the given runtime information, the error occurs because the function
      expects the input tensor `off_value` to be a float tensor, but it is instead
      an int32 tensor. To prevent this error, the data type of the `off_value` tensor
      should be changed to float. Therefore, the constraint that should be applied
      is:'
    length: 1
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: tensor
        name: str
        off_value: tensor
        on_value: tensor
      msg: 'cannot compute OneHot as input #3(zero-based) was expected to be a float
        tensor but is a int32 tensor [Op:OneHot] name: fODb'
      package: tensorflow
    txt: dtype(off_value) == float32
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is triggered because the depth argument of the OneHot function
      is set to -1, which is not a valid value. The depth must be non-negative. Therefore,
      the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: tensor
        name: str
        off_value: tensor
        on_value: tensor
      msg: '{{function_node __wrapped__OneHot_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        depth must be non-negative, got: -1 [Op:OneHot] name: HPmR'
      package: tensorflow
    txt: (depth >= 0)
  - f1_score: 92.30769230769229
    overall_score: 100
    precision: 100.0
    recall: 85.71428571428571
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: tensor
        name: str
        off_value: tensor
        on_value: tensor
      msg: '{{function_node __wrapped__OneHot_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        on_value must be a scalar, but got: [9,8,8,8,5,8,8] [Op:OneHot] name: adob'
      package: tensorflow
    txt: (on_value.dim == 0) and (off_value.dim == 0)
  - f1_score: 98.34983498349835
    overall_score: 55.17491749174918
    precision: 100.0
    recall: 96.75324675324674
- - cot: 'The error is triggered because the value of the `axis` parameter is outside
      the valid range. The error message says that the `axis` should be -1 or between
      0 and 3, but it received 59.


      To prevent this error, the value of `axis` should be within the valid range.
      So, the condition to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: tensor
        name: str
        off_value: tensor
        on_value: tensor
      msg: '{{function_node __wrapped__OneHot_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Expected axis to be -1 or between [0, 3).  But received: 4 [Op:OneHot] name:
        xwvZ'
      package: tensorflow
    txt: -1 <= axis <= 3
  - f1_score: 90.9090909090909
    overall_score: 57.45454545454545
    precision: 100.0
    recall: 83.33333333333334
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: tensor
        name: str
        off_value: tensor
        on_value: tensor
      msg: "Value for attr 'TI' of float is not in the list of allowed values: uint8,\
        \ int8, int32, int64\n\t; NodeDef: {{node OneHot}}; Op<name=OneHot; signature=indices:TI,\
        \ depth:int32, on_value:T, off_value:T -> output:T; attr=axis:int,default=-1;\
        \ attr=T:type; attr=TI:type,default=DT_INT64,allowed=[DT_UINT8, DT_INT8, DT_INT32,\
        \ DT_INT64]> [Op:OneHot] name: oKTT"
      package: tensorflow
    txt: dtype(indices) in [uint8, int8, int32, int64]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 3
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: uint8,int8,int32,int64
        name: str
        off_value: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        on_value: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in indices.shape) and all(i >= 0 for i in off_value.shape)
      and all(i >= 0 for i in on_value.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        axis: int
        depth: int
        indices: uint8,int8,int32,int64
        name: str
        off_value: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        on_value: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: indices.rank <= 7 and off_value.rank <= 7 and on_value.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
