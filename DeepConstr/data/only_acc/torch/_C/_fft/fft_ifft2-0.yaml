args:
  dtype:
  - Tensor
  - Optional[List[int]]
  - List[int]
  - Optional[str]
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - s
  - dim
  - norm
  required:
  - true
  - false
  - false
  - false
name: torch._C._fft.fft_ifft2
package: torch
pass_rate: 99.63099630996311
rules:
- - cot: synthesized
    target:
      choosen_dtype:
        dim: list[int]
        norm: None
        s: None
        self: tensor
      msg: Dimension out of range (expected to be in range of [-1, 0], but got 3)
      package: torch
    txt: (all(d >= -len(self.shape) and d < len(self.shape) for d in dim)) and (-len(self.shape)
      <= 3 < len(self.shape))
  - f1_score: 92.7357032457496
    overall_score: 100
    precision: 100.0
    recall: 86.45533141210375
- - cot: 'The error is due to an invalid normalization mode. The value provided for
      ''norm'' is "Gyck" which is not a valid normalization mode. The valid normalization
      modes for this function are "forward" and "backward". Therefore, the condition
      to prevent this error is:'
    target:
      choosen_dtype:
        dim: list[int]
        norm: str
        s: None
        self: tensor
      msg: 'Invalid normalization mode: "Gyck"'
      package: torch
    txt: norm in ["forward", "backward"]
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        norm: Optional[str]
        s: Optional[List[int]]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        norm: Optional[str]
        s: Optional[List[int]]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
