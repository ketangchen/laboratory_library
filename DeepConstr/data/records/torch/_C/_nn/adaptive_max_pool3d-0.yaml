args:
  dtype:
  - Tensor
  - List[int]
  is_pos:
  - true
  - false
  name:
  - self
  - output_size
  required:
  - true
  - true
name: torch._C._nn.adaptive_max_pool3d
package: torch
pass_rate: 38.0
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: 'adaptive_max_pool3d(): Expected 4D or 5D tensor, but got: [1, 1]'
      package: torch
    txt: self.ndims() == 5
  - f1_score: 95.23809523809523
    overall_score: 100
    precision: 100.0
    recall: 90.9090909090909
- - cot: "Based on the given runtime information, the error message indicates that\
      \ the `output_size` argument passed to the `adaptive_max_pool3d` function has\
      \ an empty list `[]` as its value. However, the `output_size` argument is expected\
      \ to be a list of three integers.\n\nTo prevent this error, the `output_size`\
      \ argument should be a list of three integers. \n\nThe constraint can be formulated\
      \ as:"
    length: 1
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: 'adaptive_max_pool3d(): internal error: output_size.size() must be 3'
      package: torch
    txt: len(output_size) == 3
  - f1_score: 98.28009828009829
    overall_score: 100
    precision: 100.0
    recall: 96.61835748792271
- - cot: "Based on the given runtime information, the error is triggered because the\
      \ input tensor has a size of 0 in dimension 3, which is a non-batch dimension.\
      \ To prevent this error, we need to ensure that all non-batch dimensions have\
      \ a non-zero size. \n\nThe constraint can be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: 'adaptive_max_pool3d(): Expected input to have non-zero size for non-batch
        dimensions, but input has sizes [9, 8, 7, 0, 6] with dimension 3 being empty'
      package: torch
    txt: all(self.shape[i] != 0 for i in range(1, len(self.shape)))
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: '"adaptive_max_pool3d_cpu" not implemented for ''Int'''
      package: torch
    txt: (self.dtype == torch.float32)
  - f1_score: 97.74436090225565
    overall_score: 60.872180451127825
    precision: 100.0
    recall: 95.58823529411764
- - cot: default
    length: 1
    target:
      choosen_dtype:
        output_size: List[int]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        output_size: List[int]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
