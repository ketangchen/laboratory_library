args:
  dtype:
  - Tensor
  - number
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.floor_divide
package: torch
pass_rate: 100
rules:
- - cot: 'The error is caused by the fact that the function is trying to divide by
      zero, which is not allowed in mathematics. Therefore, the constraint that would
      prevent this error is to ensure that the `other` argument is not zero. So, Left
      : other, Op : !=, and Right : 0'
    length: 1
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: ZeroDivisionError
      package: torch
    txt: other != 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: The error is due to the result of torch.floor_divide being of type Float,
      but it can't be cast to the desired output type Int. Looking at the args, the
      dtype of 'self' is float32, while the dtype of 'out' is int32. Therefore, the
      dtypes of 'self' and 'out' should be consistent.
    length: 1
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(self)==dtype(out)
  - f1_score: 93.89671361502347
    overall_score: 58.948356807511736
    precision: 100.0
    recall: 88.49557522123894
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 86.25730994152045
    overall_score: 55.12865497076022
    precision: 98.33333333333333
    recall: 76.82291666666666
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: number
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: number
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
