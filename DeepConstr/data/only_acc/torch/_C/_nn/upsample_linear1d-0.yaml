args:
  dtype:
  - Tensor
  - Optional[List[int]]
  - bool
  - Optional[List[float]]
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - input
  - output_size
  - align_corners
  - scale_factors
  required:
  - true
  - false
  - true
  - false
name: torch._C._nn.upsample_linear1d
package: torch
pass_rate: 0.0
rules:
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        input: Tensor
        output_size: Optional[List[int]]
        scale_factors: Optional[List[float]]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        input: Tensor
        output_size: Optional[List[int]]
        scale_factors: Optional[List[float]]
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        input: Tensor
        output_size: Optional[List[int]]
        scale_factors: Optional[List[float]]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        input: Tensor
        output_size: Optional[List[int]]
        scale_factors: Optional[List[float]]
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
