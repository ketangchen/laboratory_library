args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - false
  - false
  name:
  - real
  - imag
  required:
  - true
  - true
name: torch.complex
package: torch
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        imag: tensor
        real: tensor
      msg: The size of tensor a (7) must match the size of tensor b (9) at non-singleton
        dimension 4
      package: torch
    txt: (real.size() == imag.size()) and (imag.dim() == real.dim())
  - f1_score: 95.84664536741214
    overall_score: 100
    precision: 100.0
    recall: 92.02453987730061
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        imag: tensor
        real: tensor
      msg: Expected both inputs to be Half, Float or Double tensors but got Float
        and Int
      package: torch
    txt: (imag.dtype == real.dtype) and (dtype(real) in [Half, Float, Double])
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        imag: Tensor
        real: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in real.shape) and all(i >= 0 for i in imag.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        imag: Tensor
        real: Tensor
      msg: Too large tensor shape
      package: torch
    txt: real.rank <= 7 and imag.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
