args:
  dtype:
  - Tensor
  - int
  - int
  - int
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - dimension
  - size
  - step
  required:
  - true
  - true
  - true
  - true
name: torch.unfold_copy
package: torch
pass_rate: 91.62011173184358
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: tensor
        size: int
        step: int
      msg: Dimension out of range (expected to be in range of [-2, 1], but got 10)
      package: torch
    txt: dimension >= -len(self.shape)
  - f1_score: 78.80085653104926
    overall_score: 49.0
    precision: 92.0
    recall: 68.91385767790263
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        dimension: int
        self: tensor
        size: int
        step: int
      msg: maximum size for tensor at dimension 0 is 2 but size is 3
      package: torch
    txt: (((size <= 4) and (self.dim == 6)) and (size <= self.size(0))) and (size
      <= self.shape[dimension])
  - f1_score: 71.04795737122558
    overall_score: 100
    precision: 100.0
    recall: 55.09641873278237
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: tensor
        size: int
        step: int
      msg: Dimension out of range (expected to be in range of [-6, 5], but got 9)
      package: torch
    txt: dimension < len(self.shape)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: The error is triggered because the step value is -3, but it must be greater
      than 0. To prevent this error, the step value should be greater than 0. The
      constraint can be formulated as
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: tensor
        size: int
        step: int
      msg: step is -3 but must be > 0
      package: torch
    txt: step > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Based on the given runtime information, the error is triggered because the
      size argument has a negative value (-4) in the dimensions. To prevent this error,
      the size argument should be a positive value or zero.


      Wrap the final formula with'
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: tensor
        size: int
        step: int
      msg: Storage size calculation overflowed with sizes=[7, 8, 2, 7, 7, 5, -3] and
        strides=[17640, 2205, 2205, 35, 5, 1, 245]
      package: torch
    txt: size >= 0
  - f1_score: 97.31051344743277
    overall_score: 100
    precision: 100.0
    recall: 94.76190476190477
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: tensor
        size: int
        step: int
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank
  - f1_score: 62.283940099581606
    overall_score: 47.6524064171123
    precision: 89.3048128342246
    recall: 47.816228943505365
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: Tensor
        size: int
        step: int
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dimension: int
        self: Tensor
        size: int
        step: int
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
