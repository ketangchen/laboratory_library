args:
  dtype:
  - Tensor
  - Optional[List[int]]
  - bool
  - bool
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - dim
  - unbiased
  - keepdim
  required:
  - true
  - false
  - false
  - false
name: torch.var_mean
package: torch
pass_rate: 100
rules:
- - cot: 'The error is caused because the input tensor has a dtype of i32, which is
      not supported by the var_mean function. To prevent this error, the input tensor
      should have a floating point or complex dtype. Therefore, the constraint to
      prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        dim: None
        keepdim: bool
        self: tensor
        unbiased: bool
      msg: var_mean only support floating point and complex dtypes
      package: torch
    txt: self.dtype in [torch.float32, torch.float64, torch.complex64, torch.complex128]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        keepdim: bool
        self: Tensor
        unbiased: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        keepdim: bool
        self: Tensor
        unbiased: bool
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
