args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - mat2
  required:
  - true
  - true
name: torch.bmm
package: torch
pass_rate: 91.48936170212765
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        mat2: tensor
        self: tensor
      msg: batch1 must be a 3D tensor
      package: torch
    txt: self.dim == 3 and mat2.dim == 3
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Based on the given runtime information, the error occurs because the size
      of the first two dimensions of the `mat2` tensor does not match the size of
      the corresponding dimensions in the `self` tensor. The expected size for the
      first two dimensions of the `mat2` tensor is `[8, 6]`, but the actual size is
      `[8, 8]`.


      To prevent this error, the constraint can be formulated as follows:'
    length: 1
    target:
      choosen_dtype:
        mat2: tensor
        self: tensor
      msg: 'Expected size for first two dimensions of batch2 tensor to be: [3, 7]
        but got: [5, 3].'
      package: torch
    txt: mat2.shape[0] == self.shape[0] and mat2.shape[1] == self.shape[2]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        mat2: tensor
        self: tensor
      msg: Expected out tensor to have dtype float, but got int instead
      package: torch
    txt: dtype(out) == dtype(self)
  - f1_score: 64.17657045840407
    overall_score: 48.0
    precision: 90.0
    recall: 49.86807387862797
- - cot: default
    length: 2
    target:
      choosen_dtype:
        mat2: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in mat2.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        mat2: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and mat2.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
