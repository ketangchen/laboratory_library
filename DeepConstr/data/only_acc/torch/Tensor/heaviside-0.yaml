args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - values
  required:
  - true
  - true
name: torch.Tensor.heaviside
package: torch
pass_rate: 100
rules:
- - cot: 'Based on the given runtime information, the constraint that prevents the
      error is:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        values: tensor
      msg: The size of tensor a (2) must match the size of tensor b (7) at non-singleton
        dimension 6
      package: torch
    txt: self.dim == values.dim and self.shape == values.shape
  - f1_score: 91.46341463414635
    overall_score: 100
    precision: 100.0
    recall: 84.26966292134831
- - cot: 'The error is due to the mismatch of data types between the self tensor and
      the values tensor. The self tensor has data type `i32` and the values tensor
      has data type `f32`. To prevent this error, the data types of both tensors should
      be the same. Therefore, the constraint can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        values: tensor
      msg: heaviside is not yet implemented for tensors with different dtypes.
      package: torch
    txt: self.dtype == values.dtype
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        values: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in values.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        values: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and values.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
