args:
  dtype:
  - Tensor
  - List[int]
  - bool
  is_pos:
  - false
  - false
  - false
  name:
  - input
  - output_size
  - return_indices
  required:
  - true
  - true
  - false
name: torch.nn.functional.adaptive_max_pool3d_with_indices
package: torch
pass_rate: 100
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'adaptive_max_pool3d(): Expected 4D or 5D tensor, but got: [1, 1]'
      package: torch
    txt: input.rank == 5
  - f1_score: 93.75
    overall_score: 100
    precision: 100.0
    recall: 88.23529411764706
- - cot: "The error is triggered because the `output_size` argument of `adaptive_max_pool3d_with_indices`\
      \ should have a size of 3. However, in this case, the `output_size` is an empty\
      \ list, which does not satisfy the size requirement.\n\nTo prevent the error,\
      \ the `output_size` argument should be a list or tuple of size 3. \n\nTherefore,\
      \ the constraint that prevents the error is:"
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'adaptive_max_pool3d(): internal error: output_size.size() must be 3'
      package: torch
    txt: len(output_size) == 3
  - f1_score: 69.12442396313365
    overall_score: 100
    precision: 100.0
    recall: 52.816901408450704
- - cot: Based on the runtime information, the error is triggered because the output_size
      argument contains a negative value (-4), which is not a valid dimension. To
      prevent this error, the output_size argument should only contain positive values.
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'Trying to create tensor with negative dimension -4: [3, 7, 3, -4, 3]'
      package: torch
    txt: (output_size[i] > 0 for i in range(len(output_size)))
  - f1_score: 97.71986970684038
    overall_score: 100
    precision: 100.0
    recall: 95.54140127388536
- - cot: synthesized
    length: 5
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: 'adaptive_max_pool3d(): Expected input to have non-zero size for non-batch
        dimensions, but input has sizes [8, 0, 8, 2, 5] with dimension 1 being empty'
      package: torch
    txt: (((((input.shape[1]!=0)) and (input.shape[4] != 0)) and (input.shape[i] !=
      0)) and (input.shape[3] != 0)) and (all(input.shape[i] > 0 for i in range(1,
      len(input.shape))))
  - f1_score: 68.97347174163784
    overall_score: 100
    precision: 100.0
    recall: 52.640845070422536
- - cot: The error is due to the fact that the function `torch.nn.functional.adaptive_max_pool3d_with_indices`
      does not support input tensors of type 'Int'. To prevent this error, the input
      tensor should be of a different data type, such as 'Float' or 'Double'.
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: '"adaptive_max_pool3d_cpu" not implemented for ''Int'''
      package: torch
    txt: input.dtype != 'Int'
  - f1_score: 74.442538593482
    overall_score: 100
    precision: 100.0
    recall: 59.2896174863388
- - cot: "The error is occurring because the input tensor has a data type of 'Bool'\
      \ which is not supported by the function `torch.nn.functional.adaptive_max_pool3d_with_indices`.\
      \ \n\nTo prevent the error, the input tensor should have a data type that is\
      \ supported by the function, such as 'float' or 'double'.\n\nWrap the final\
      \ formula with"
    length: 1
    target:
      choosen_dtype:
        input: tensor
        output_size: list[int]
        return_indices: bool
      msg: '"adaptive_max_pool3d_cpu" not implemented for ''Bool'''
      package: torch
    txt: input.dtype in [torch.float32, torch.float64]
  - f1_score: 99.0990990990991
    overall_score: 100
    precision: 100.0
    recall: 98.21428571428572
- - cot: default
    length: 1
    target:
      choosen_dtype:
        input: Tensor
        output_size: List[int]
        return_indices: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        input: Tensor
        output_size: List[int]
        return_indices: bool
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
