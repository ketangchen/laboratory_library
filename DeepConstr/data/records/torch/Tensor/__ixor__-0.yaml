args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.__ixor__
package: torch
pass_rate: 100
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: output with shape [1] doesn't match the broadcast shape [1, 8, 8, 9, 8,
        5]
      package: torch
    txt: self.dim() >= other.dim()
  - f1_score: 75.01875468867217
    overall_score: 49.50937734433609
    precision: 100.0
    recall: 60.02400960384154
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: uint64
      package: torch
    txt: (dtype(other) in ["half", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"]) or (shape(other) == shape(self))
  - f1_score: 82.14904679376083
    overall_score: 53.074523396880416
    precision: 94.8
    recall: 72.4770642201835
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_xor_cpu" not implemented for ''Float'''
      package: torch
    txt: dtype(self) != "float32" and dtype(other) != "float32"
  - f1_score: 89.2678034102307
    overall_score: 56.63390170511535
    precision: 89.0
    recall: 89.53722334004024
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (6) at non-singleton
        dimension 6
      package: torch
    txt: self.dim() == other.dim() and self.shape == other.shape
  - f1_score: 75.18796992481204
    overall_score: 49.59398496240602
    precision: 100.0
    recall: 60.24096385542168
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
