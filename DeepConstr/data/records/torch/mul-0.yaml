args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.mul
package: torch
pass_rate: 100
rules:
- - cot: 'Error is triggered because the size of tensor a (3) must match the size
      of tensor b (5) at non-singleton dimension 6. Let''s see what the args were.
      The first tensor has shape [7, 8, 3, 8, 3, 3] and the second tensor has shape
      [5, 5, 5, 5, 5, 5]. The mismatch occurs at dimension 6. Therefore, we can formulate
      the constraint as follows:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (7) must match the size of tensor b (5) at non-singleton
        dimension 6
      package: torch
    txt: self.shape[6] == other.shape[6]
  - f1_score: 76.77543186180422
    overall_score: 50.38771593090211
    precision: 100.0
    recall: 62.30529595015576
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
