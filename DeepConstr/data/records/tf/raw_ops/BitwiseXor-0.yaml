args:
  dtype:
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.raw_ops.BitwiseXor
package: tensorflow
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__BitwiseXor_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [4,4,4,4,4,4] vs. [7,3,2,3,3] [Op:BitwiseXor] name: Mkcd'
      package: tensorflow
    txt: (y.shape[4] == 0) or (len(x) == len(y))
  - f1_score: 96.75810473815461
    overall_score: 60.37905236907731
    precision: 97.0
    recall: 96.51741293532339
- - cot: 'The error arises because the function is trying to perform the BitwiseXor
      operation on a int32 tensor and a float tensor. However, both tensors in generated
      args must have the same data type. Let''s see what the args were. The ''x''
      tensor is int32, but the ''y'' tensor is of type float. Therefore, the constraint
      to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute BitwiseXor as input #1(zero-based) was expected to be a
        int32 tensor but is a float tensor [Op:BitwiseXor] name: rKym'
      package: tensorflow
    txt: dtype(y) == dtype(x)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: "Value for attr 'T' of float is not in the list of allowed values: int8,\
        \ int16, int32, int64, uint8, uint16, uint32, uint64\n\t; NodeDef: {{node\
        \ BitwiseXor}}; Op<name=BitwiseXor; signature=x:T, y:T -> z:T; attr=T:type,allowed=[DT_INT8,\
        \ DT_INT16, DT_INT32, DT_INT64, DT_UINT8, DT_UINT16, DT_UINT32, DT_UINT64];\
        \ is_commutative=true> [Op:BitwiseXor] name: EOdm"
      package: tensorflow
    txt: dtype(x) in ["int8", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
