args:
  dtype:
  - Tensor
  - Optional[List[int]]
  - Optional[List[int]]
  - Optional[str]
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - s
  - dim
  - norm
  required:
  - true
  - false
  - false
  - false
name: torch._C._fft.fft_fftn
package: torch
pass_rate: 100
rules:
- - cot: 'Based on the given runtime information, the error is triggered because the
      normalization mode is set to "Pyjd", which is not a valid normalization mode.
      The valid normalization modes are "backward", "forward", and "ortho".


      Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        dim: None
        norm: str
        s: None
        self: tensor
      msg: 'Invalid normalization mode: "sZEA"'
      package: torch
    txt: norm in ["backward", "forward", "ortho"]
  - f1_score: 99.50248756218905
    overall_score: 100
    precision: 100.0
    recall: 99.00990099009901
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: None
        norm: None
        s: None
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 81.19079837618402
    overall_score: 100
    precision: 100.0
    recall: 68.3371298405467
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        norm: Optional[str]
        s: Optional[List[int]]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        norm: Optional[str]
        s: Optional[List[int]]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
