args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - vec
  required:
  - true
  - true
name: torch.Tensor.mv
package: torch
pass_rate: 100
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        self: tensor
        vec: tensor
      msg: expected scalar type Int but found Float
      package: torch
    txt: dtype(vec) == dtype(self)
  - f1_score: 99.40357852882703
    overall_score: 61.70178926441351
    precision: 100.0
    recall: 98.81422924901186
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        self: tensor
        vec: tensor
      msg: size mismatch, got input (3), mat (3x6), vec (8)
      package: torch
    txt: (vec.dim == 1) and (self.shape[1] == vec.shape[0])
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Error is caused because the tensor''s shape is too large. The torch.Tensor.mv
      function expects a 2-dimensional tensor as the self tensor and a 1-dimensional
      tensor as the vector. It seems the self tensor has too many dimensions. Therefore,
      the condition to prevent this error would be to ensure that the self tensor
      is 2-dimensional and the vector tensor is 1-dimensional. So, Left : self.dim,
      vec.dim should be corrected. For self, Op : ==, and Right : 2. For vec, Op :
      ==, and Right : 1.'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        vec: tensor
      msg: 'Too large tensor shape: shape = [8, 8, 8, 8, 8, 8, 8, 9, 8]'
      package: torch
    txt: self.dim == 2 and vec.dim == 1
  - f1_score: 68.76340243030737
    overall_score: 46.38170121515368
    precision: 96.2
    recall: 53.503893214682975
- - cot: 'Error is triggered because the dimension specified as 0 but the tensor has
      no dimensions. To prevent this error, we need to make sure that the dimension
      specified is within the range of the tensor''s dimensions. Let''s see what the
      args were. The dimension specified is 0, but the tensor has no dimensions. Therefore,
      the condition to prevent this error is:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        vec: tensor
      msg: Dimension specified as 0 but tensor has no dimensions
      package: torch
    txt: len(self.shape) > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        vec: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in vec.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        vec: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and vec.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
