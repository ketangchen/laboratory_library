args:
  dtype:
  - float16,bfloat16,float32,float64
  - float16,bfloat16,float32,float64
  - str
  is_pos:
  - false
  - false
  - false
  name:
  - features
  - gradients
  - name
  required:
  - true
  - true
  - false
name: tf.raw_ops.SoftsignGrad
package: tensorflow
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        features: tensor
        gradients: tensor
        name: str
      msg: '{{function_node __wrapped__SoftsignGrad_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Inputs to operation SoftsignGrad of type SoftsignGrad must have the same size
        and shape.  Input 0: [3,3,3,3] != input 1: [1,1] [Op:SoftsignGrad] name: VzMj'
      package: tensorflow
    txt: (gradients.shape == features.shape) and (len(features.shape) == len(gradients.shape))
  - f1_score: 95.01187648456057
    overall_score: 100
    precision: 100.0
    recall: 90.49773755656109
- - cot: 'Based on the given runtime information, the error occurs because the attribute
      ''gradients'' is of type int32, but it is expected to be one of the allowed
      types: half, bfloat16, float, double. Therefore, the constraint to prevent the
      error is:'
    length: 1
    target:
      choosen_dtype:
        features: tensor
        gradients: tensor
        name: str
      msg: "Value for attr 'T' of int32 is not in the list of allowed values: half,\
        \ bfloat16, float, double\n\t; NodeDef: {{node SoftsignGrad}}; Op<name=SoftsignGrad;\
        \ signature=gradients:T, features:T -> backprops:T; attr=T:type,allowed=[DT_HALF,\
        \ DT_BFLOAT16, DT_FLOAT, DT_DOUBLE]> [Op:SoftsignGrad] name: Yulk"
      package: tensorflow
    txt: dtype(gradients) in ["half", "bfloat16", "float", "double"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Based on the given runtime information, the error occurs because the function
      `tf.raw_ops.SoftsignGrad` expects the `gradients` input to be a half tensor,
      but it is a float tensor.


      To prevent this error, the `gradients` tensor should be converted to a half
      tensor before passing it to the function.


      The constraint formula to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        features: tensor
        gradients: tensor
        name: str
      msg: 'cannot compute SoftsignGrad as input #1(zero-based) was expected to be
        a half tensor but is a float tensor [Op:SoftsignGrad] name: BqKr'
      package: tensorflow
    txt: dtype(gradients) == dtype(features)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        features: float16,bfloat16,float32,float64
        gradients: float16,bfloat16,float32,float64
        name: str
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in features.shape) and all(i >= 0 for i in gradients.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        features: float16,bfloat16,float32,float64
        gradients: float16,bfloat16,float32,float64
        name: str
      msg: Too large tensor shape
      package: tensorflow
    txt: features.rank <= 7 and gradients.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
