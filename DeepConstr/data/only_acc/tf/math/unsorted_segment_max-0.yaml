args:
  dtype:
  - tensor
  - tensor
  - tensor
  - str
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - data
  - segment_ids
  - num_segments
  - name
  required:
  - true
  - true
  - true
  - false
name: tf.math.unsorted_segment_max
package: null
pass_rate: 1.6666666666666667
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        data: tensor
        name: str
        num_segments: tensor
        segment_ids: tensor
      msg: "Value for attr 'Tnumsegments' of float is not in the list of allowed values:\
        \ int32, int64\n\t; NodeDef: {{node UnsortedSegmentMax}}; Op<name=UnsortedSegmentMax;\
        \ signature=data:T, segment_ids:Tindices, num_segments:Tnumsegments -> output:T;\
        \ attr=T:type,allowed=[DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16,\
        \ DT_INT8, DT_INT64, DT_BFLOAT16, DT_UINT16, DT_HALF, DT_UINT32, DT_UINT64];\
        \ attr=Tindices:type,allowed=[DT_INT32, DT_INT64]; attr=Tnumsegments:type,default=DT_INT32,allowed=[DT_INT32,\
        \ DT_INT64]> [Op:UnsortedSegmentMax] name: pvnV"
      package: tensorflow
    txt: (dtype(num_segments) in ["int32", "int64"]) and (dtype(segment_ids) in ["int32",
      "int64"])
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'num_segments should be a scalar, not have any dimensions. Therefore, the
      constraint that prevents the error is:'
    length: 1
    target:
      choosen_dtype:
        data: tensor
        name: str
        num_segments: tensor
        segment_ids: tensor
      msg: '{{function_node __wrapped__UnsortedSegmentMax_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        num_segments should be a scalar, not shape [4,6,5,2,1,6,6] [Op:UnsortedSegmentMax]
        name: MpVp'
      package: tensorflow
    txt: num_segments.dim == 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 3
    target:
      choosen_dtype:
        data: tensor
        name: str
        num_segments: tensor
        segment_ids: tensor
      msg: negative dimensions are not allowed
      package: null
    txt: all(i >= 0 for i in data.shape) and all(i >= 0 for i in segment_ids.shape)
      and all(i >= 0 for i in num_segments.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        data: tensor
        name: str
        num_segments: tensor
        segment_ids: tensor
      msg: Too large tensor shape
      package: null
    txt: data.rank <= 7 and segment_ids.rank <= 7 and num_segments.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        data: tensor
        name: str
        num_segments: tensor
        segment_ids: tensor
      msg: negative dimensions are not allowed
      package: null
    txt: all(i >= 0 for i in data.shape) and all(i >= 0 for i in segment_ids.shape)
      and all(i >= 0 for i in num_segments.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        data: tensor
        name: str
        num_segments: tensor
        segment_ids: tensor
      msg: Too large tensor shape
      package: null
    txt: data.rank <= 7 and segment_ids.rank <= 7 and num_segments.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
