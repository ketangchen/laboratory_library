args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.logical_xor
package: torch
pass_rate: 14.000000000000002
rules:
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: ((out.shape == self.shape) and (out.rank == self.rank and all(out.shape[i]
      == self.shape[i] for i in range(out.rank)))) and (out.shape == other.shape)
  - f1_score: 79.71698113207546
    overall_score: 43.85849056603773
    precision: 84.5
    recall: 75.44642857142856
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (6) must match the size of tensor b (3) at non-singleton
        dimension 3
      package: torch
    txt: self.shape[4] == 1
  - f1_score: 89.68609865470852
    overall_score: 56.84304932735426
    precision: 100.0
    recall: 81.30081300813008
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape) and
      all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
