args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - out
  required:
  - true
  - true
name: torch._C._linalg.linalg_eigvals
package: torch
pass_rate: 52.0
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: 'linalg.eigvals: A must be batches of square matrices, but they are 1 by
        6 matrices'
      package: torch
    txt: all(self.shape[i] == self.shape[-1] for i in range(len(self.shape) - 2))
  - f1_score: 68.02721088435375
    overall_score: 100
    precision: 100.0
    recall: 51.54639175257733
- - cot: 'Based on the given runtime information, the error is triggered because the
      input tensor `self` must have at least 2 dimensions. To prevent the error, the
      following constraint can be formulated:'
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: 'linalg.eigvals: The input tensor A must have at least 2 dimensions.'
      package: torch
    txt: self.dim >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: 'linalg.eigvals: A must be batches of square matrices, but they are 5 by
        7 matrices'
      package: torch
    txt: self.size(-2) == self.size(-1)
  - f1_score: 98.03921568627452
    overall_score: 100
    precision: 100.0
    recall: 96.15384615384615
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: 'torch.linalg.eigvals: Expected eigenvalues to be safely castable from
        ComplexFloat dtype, but got eigenvalues with dtype Float'
      package: torch
    txt: (self.dtype == torch.complex64) and (out.dtype == ComplexFloat)
  - f1_score: 98.6754966887417
    overall_score: 100
    precision: 100.0
    recall: 97.38562091503267
- - cot: The error is due to the incompatible shapes of the output tensor and the
      input tensor. The function torch._C._linalg.linalg_eigvals is expected to perform
      eigenvalue computations on the input tensor and store the results in the output
      tensor. However, the shapes of the two tensors do not match. The input tensor
      has a shape of [4, 4] and the output tensor has a shape of [5, 8, 3, 3, 3, 3].
      The operation cannot be performed because the dimensions do not match. Therefore,
      the shape of the output tensor should be the same as that of the input tensor.
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: '''complex32'''
      package: torch
    txt: out.shape == self.shape
  - f1_score: 64.21207658321062
    overall_score: 39.333333333333336
    precision: 72.66666666666667
    recall: 57.51978891820582
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
