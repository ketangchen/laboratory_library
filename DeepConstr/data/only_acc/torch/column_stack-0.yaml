args:
  dtype:
  - List[Tensor]
  is_pos:
  - true
  name:
  - tensors
  required:
  - true
name: torch.column_stack
package: torch
pass_rate: 80.0
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        tensors: list[tensor]
      msg: column_stack expects a non-empty TensorList
      package: torch
    txt: len(tensors) > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Error is caused because the shape of one of the tensors in the input list
      is too large. The shape of the tensor is [9, 9, 9, 9, 9, 9, 9, 9, 9], which
      is larger than the expected shape. Therefore, Left : len(tensors[i].shape) which
      is the number of dimensions of each tensor should be corrected. It says that
      cannot be greater than 3, so Op : >, and Right : 3.'
    length: 1
    target:
      choosen_dtype:
        tensors: list[tensor]
      msg: 'Too large tensor shape: shape = [9, 9, 9, 9, 9, 9, 9, 9, 9]'
      package: torch
    txt: len(tensors[i].shape) <= 3
  - f1_score: 72.94117647058823
    overall_score: 49.5
    precision: 93.0
    recall: 60.0
- - cot: 'The error is triggered because the tensors given to `torch.column_stack`
      have different numbers of dimensions (6 and 2). It expects all tensors to have
      the same number of dimensions. Let''s see what the arguments were. It seems
      the dimensions of some of the tensors in the `tensors` list are different. To
      prevent the error, we need to ensure that all tensors in the list have the same
      number of dimensions. Therefore, the condition should be:'
    length: 1
    target:
      choosen_dtype:
        tensors: list[tensor]
      msg: 'Tensors must have same number of dimensions: got 6 and 2'
      package: torch
    txt: all(tensors[i].dim() == tensors[0].dim() for i in range(1, len(tensors)))
  - f1_score: 67.45362563237775
    overall_score: 100
    precision: 100.0
    recall: 50.89058524173028
- - cot: default
    length: 0
    target:
      choosen_dtype:
        tensors: List[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 0
    target:
      choosen_dtype:
        tensors: List[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
