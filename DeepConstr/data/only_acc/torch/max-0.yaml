args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.max
package: torch
pass_rate: 100
rules:
- - cot: 'Error is triggered because size of tensors at non-singleton dimension 2
      doesn''t match. What the args were? The tensors are `other=Tensor<f32>[3, 1,
      4, 1, 1, 1]` and `self=Tensor<f32>[3, 9, 9, 9, 9]`. It seems dimensions and
      shape of `self` and `other` are inconsistent. Therefore, the condition to prevent
      the error can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (2) must match the size of tensor b (9) at non-singleton
        dimension 3
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 93.45794392523364
    overall_score: 100
    precision: 100.0
    recall: 87.71929824561403
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
