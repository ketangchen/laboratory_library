args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - values
  required:
  - true
  - true
name: torch.heaviside
package: torch
pass_rate: 100
rules:
- - cot: 'The error is due to tensors with different dtypes. The input tensor `self`
      has dtype `f32` and the input tensor `values` has dtype `i32`. To prevent this
      error, the dtypes of both tensors should be the same. Therefore, the constraint
      can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        values: tensor
      msg: heaviside is not yet implemented for tensors with different dtypes.
      package: torch
    txt: self.dtype == values.dtype
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Based on the given runtime information, to prevent the error in the torch.heaviside
      function, the following constraint should be satisfied:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        values: tensor
      msg: The size of tensor a (4) must match the size of tensor b (7) at non-singleton
        dimension 4
      package: torch
    txt: self.dim == values.dim and self.shape == values.shape
  - f1_score: 97.47899159663865
    overall_score: 60.739495798319325
    precision: 96.66666666666667
    recall: 98.3050847457627
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        values: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in values.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        values: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and values.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
