args:
  dtype:
  - Tensor
  - Tensor
  - bool
  - bool
  - bool
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - B
  - upper
  - left
  - unitriangular
  required:
  - true
  - true
  - true
  - false
  - false
name: torch._C._linalg.linalg_solve_triangular
package: torch
pass_rate: 100
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: 'linalg.solve_triangular: Incompatible shapes of A and B for the equation
        XA = B (8x8 and 1x1)'
      package: torch
    txt: self.shape[-1] == B.shape[-1]
  - f1_score: 73.43941248470013
    overall_score: 100
    precision: 100.0
    recall: 58.027079303675045
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: 'linalg.solve_triangular: The input tensor B must have at least 2 dimensions.'
      package: torch
    txt: (B.dim >= 2) and (len(self.shape) >= 2)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: 'linalg.solve_triangular: Incompatible shapes of A and B for the equation
        XA = B (8x8 and 9x9)'
      package: torch
    txt: (len(B) == len(self)) and (all(self.shape[i] == B.shape[i] for i in range(self.rank)))
  - f1_score: 91.46341463414635
    overall_score: 100
    precision: 100.0
    recall: 84.26966292134831
- - cot: 'The error is caused because the input matrix A is not a square matrix. To
      prevent this error, we need to ensure that A is a square matrix. We can express
      this constraint as:'
    length: 1
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: 'linalg.solve_triangular: A must be batches of square matrices, but they
        are 6 by 7 matrices'
      package: torch
    txt: self.shape[-2] == self.shape[-1]
  - f1_score: 91.0752131116658
    overall_score: 52.82993197278912
    precision: 99.65986394557824
    recall: 83.85222443847022
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: (self.dim() >= 0) and (all(dim >= 0 for dim in B.shape) and all(dim >= 0
      for dim in self.shape))
  - f1_score: 89.69258589511755
    overall_score: 100
    precision: 100.0
    recall: 81.31147540983608
- - cot: The error is due to the fact that the `linalg_solve_triangular` function
      is not implemented for tensors with data type 'Int'. To prevent this error,
      the data type of the `self` tensor should be changed to a supported data type,
      such as 'Float'.
    length: 1
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: '"triangular_solve_cpu" not implemented for ''Int'''
      package: torch
    txt: self.dtype in [torch.float16, torch.float32, torch.float64]
  - f1_score: 97.8131212723658
    overall_score: 100
    precision: 100.0
    recall: 95.71984435797665
- - cot: 'Based on the given runtime information, the error occurs because the function
      `torch._C._linalg.linalg_solve_triangular` does not support the ''Half'' data
      type. The input tensor `self` is of type ''Half'', which is not compatible with
      the implementation of `triangular_solve_cpu`.


      To prevent this error, the input tensor `self` should be of a different data
      type that is supported by `triangular_solve_cpu`. One possible constraint that
      can be added is:'
    length: 1
    target:
      choosen_dtype:
        B: tensor
        left: bool
        self: tensor
        unitriangular: bool
        upper: bool
      msg: '"triangular_solve_cpu" not implemented for ''Half'''
      package: torch
    txt: dtype(self) != "half"
  - f1_score: 99.77011494252874
    overall_score: 100
    precision: 100.0
    recall: 99.54128440366972
- - cot: default
    length: 2
    target:
      choosen_dtype:
        B: Tensor
        left: bool
        self: Tensor
        unitriangular: bool
        upper: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in B.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        B: Tensor
        left: bool
        self: Tensor
        unitriangular: bool
        upper: bool
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and B.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
