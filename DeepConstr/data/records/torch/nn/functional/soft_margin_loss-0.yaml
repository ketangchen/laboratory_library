args:
  dtype:
  - Tensor
  - Tensor
  - Optional[bool]
  - Optional[bool]
  - str
  is_pos:
  - false
  - false
  - false
  - false
  - false
  name:
  - input
  - target
  - size_average
  - reduce
  - reduction
  required:
  - true
  - true
  - false
  - false
  - false
name: torch.nn.functional.soft_margin_loss
package: torch
pass_rate: 40.666666666666664
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        input: tensor
        reduce: bool
        reduction: str
        size_average: None
        target: tensor
      msg: The size of tensor a (5) must match the size of tensor b (3) at non-singleton
        dimension 3
      package: torch
    txt: input.shape[3] == target.shape[3]
  - f1_score: 76.04562737642586
    overall_score: 100
    precision: 100.0
    recall: 61.34969325153374
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        input: tensor
        reduce: None
        reduction: str
        size_average: None
        target: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(input) == dtype(target)
  - f1_score: 65.67164179104479
    overall_score: 44.835820895522396
    precision: 95.33333333333334
    recall: 50.0875656742557
- - cot: The error is due to an invalid value for the 'reduction' parameter. The given
      value for 'reduction' is 'eZkv', which is not a valid value. The valid values
      for 'reduction' are 'none', 'mean', and 'sum'. Therefore, the value of 'reduction'
      should be corrected to one of these valid values.
    length: 1
    target:
      choosen_dtype:
        input: tensor
        reduce: None
        reduction: str
        size_average: None
        target: tensor
      msg: ulIV is not a valid value for reduction
      package: torch
    txt: reduction in ['none', 'mean', 'sum']
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        input: Tensor
        reduce: Optional[bool]
        reduction: str
        size_average: Optional[bool]
        target: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape) and all(i >= 0 for i in target.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        input: Tensor
        reduce: Optional[bool]
        reduction: str
        size_average: Optional[bool]
        target: Tensor
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7 and target.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
