args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.logaddexp2
package: torch
pass_rate: 94.5
rules:
- - cot: 'Based on the given runtime information, the constraint that prevents the
      error is:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (4) must match the size of tensor b (9) at non-singleton
        dimension 4
      package: torch
    txt: self.shape[2] == other.shape[2]
  - f1_score: 76.77543186180422
    overall_score: 100
    precision: 100.0
    recall: 62.30529595015576
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"logaddexp2_cpu" not implemented for ''Int'''
      package: torch
    txt: (dtype(other) == dtype(self)) and (other.dtype != 'Int')
  - f1_score: 66.77796327212019
    overall_score: 100
    precision: 100.0
    recall: 50.125313283208015
- - cot: The error is due to the function `torch.logaddexp2` not implemented for boolean
      tensors. The input tensors have a data type of `bool` (Tensor<b>), which is
      not supported by the function. Therefore, the constraint to prevent the error
      is to ensure that the input tensors have a data type other than `bool`.
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"logaddexp2_cpu" not implemented for ''Bool'''
      package: torch
    txt: other.dtype != torch.bool
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '''complex32'''
      package: torch
    txt: self.dim() == other.dim()
  - f1_score: 66.7814113597246
    overall_score: 51.5
    precision: 97.0
    recall: 50.91863517060368
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
