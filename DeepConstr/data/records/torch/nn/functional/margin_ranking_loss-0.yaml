args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - float
  - Optional[bool]
  - Optional[bool]
  - str
  is_pos:
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - input1
  - input2
  - target
  - margin
  - size_average
  - reduce
  - reduction
  required:
  - true
  - true
  - true
  - false
  - false
  - false
  - false
name: torch.nn.functional.margin_ranking_loss
package: torch
pass_rate: 100
rules:
- - cot: 'The error is due to an invalid value for the ''reduction'' parameter. The
      value provided for ''reduction'' is ''nJFs'', which is not a valid value. The
      valid values for ''reduction'' are ["mean", "sum", "none"]. Therefore, the constraint
      that should be added to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        input1: tensor
        input2: tensor
        margin: float
        reduce: None
        reduction: str
        size_average: None
        target: tensor
      msg: Hker is not a valid value for reduction
      package: torch
    txt: reduction in ["mean", "sum", "none"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        input1: tensor
        input2: tensor
        margin: float
        reduce: bool
        reduction: str
        size_average: bool
        target: tensor
      msg: The size of tensor a (6) must match the size of tensor b (7) at non-singleton
        dimension 3
      package: torch
    txt: ((input1.shape[5] == 1) or (input1.dim() == input2.dim() and input1.shape[6]
      == input2.shape[6])) or (input1.size() == input2.size())
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        input1: tensor
        input2: tensor
        margin: float
        reduce: bool
        reduction: str
        size_average: None
        target: tensor
      msg: 'margin_ranking_loss : All input tensors should have same dimension but
        got sizes: input1: torch.Size([6, 9]), input2: torch.Size([7, 9, 9]), target:
        torch.Size([5, 9, 9, 9]) '
      package: torch
    txt: input1.dim() == input2.dim() and input1.dim() == target.dim()
  - f1_score: 99.83361064891847
    overall_score: 61.91680532445923
    precision: 100.0
    recall: 99.66777408637874
- - cot: default
    length: 3
    target:
      choosen_dtype:
        input1: Tensor
        input2: Tensor
        margin: float
        reduce: Optional[bool]
        reduction: str
        size_average: Optional[bool]
        target: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input1.shape) and all(i >= 0 for i in input2.shape) and
      all(i >= 0 for i in target.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        input1: Tensor
        input2: Tensor
        margin: float
        reduce: Optional[bool]
        reduction: str
        size_average: Optional[bool]
        target: Tensor
      msg: Too large tensor shape
      package: torch
    txt: input1.rank <= 7 and input2.rank <= 7 and target.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
