args:
  dtype:
  - Tensor
  - Optional[int]
  - int
  - Optional[str]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - n
  - dim
  - norm
  - out
  required:
  - true
  - false
  - false
  - false
  - true
name: torch._C._fft.fft_ifft
package: torch
pass_rate: 15.467625899280577
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        out: tensor
        self: tensor
      msg: ifft expects a complex output tensor, but got Float
      package: torch
    txt: out.dtype() == torch.complex128
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: Dimension out of range (expected to be in range of [-4, 3], but got 61)
      package: torch
    txt: dim >= -len(self.shape)
  - f1_score: 64.26076833527357
    overall_score: 49.0
    precision: 92.0
    recall: 49.37388193202147
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        out: tensor
        self: tensor
      msg: Found dtype ComplexDouble but expected ComplexFloat
      package: torch
    txt: out.dtype == self.dtype
  - f1_score: 85.9598853868195
    overall_score: 100
    precision: 100.0
    recall: 75.37688442211056
- - cot: 'The error is due to an invalid normalization mode. The normalization mode
      "XJGo" is not a valid option for the fft_ifft function. The valid normalization
      modes are "forward", "backward", and "ortho". Therefore, the constraint to prevent
      the error is:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: 'Invalid normalization mode: "ErJF"'
      package: torch
    txt: (norm in ["forward", "backward", "ortho"])
  - f1_score: 95.38950715421304
    overall_score: 100
    precision: 100.0
    recall: 91.1854103343465
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 73.71007371007371
    overall_score: 100
    precision: 100.0
    recall: 58.36575875486382
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        out: tensor
        self: tensor
      msg: Dimension specified as 9 but tensor has no dimensions
      package: torch
    txt: ((self.dim() == 9) or (dim == len(self.shape))) and (self.dim() > 0)
  - f1_score: 94.48818897637796
    overall_score: 100
    precision: 100.0
    recall: 89.55223880597015
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: Dimension out of range (expected to be in range of [-1, 0], but got 1)
      package: torch
    txt: (dim < len(self.shape)) or (1 >= -len(self.shape) and 1 < len(self.shape))
  - f1_score: 53.9440203562341
    overall_score: 19.966898954703833
    precision: 36.933797909407666
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
