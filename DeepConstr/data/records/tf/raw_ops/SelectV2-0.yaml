args:
  dtype:
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - condition
  - e
  - name
  - t
  required:
  - true
  - true
  - false
  - true
name: tf.raw_ops.SelectV2
package: tensorflow
pass_rate: 32.33333333333333
rules:
- - cot: "Based on the given runtime information, the error is caused by the presence\
      \ of negative dimensions in the tensor 't'. To prevent this error, the constraint\
      \ should ensure that all dimensions of 't' are positive. \n\nWrap the final\
      \ formula with"
    length: 1
    target:
      choosen_dtype:
        condition: tensor
        e: tensor
        name: str
        t: tensor
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(dim >= 0 for dim in t.shape)
  - f1_score: 69.29316338354579
    overall_score: 46.646581691772894
    precision: 99.66666666666667
    recall: 53.108348134991125
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        condition: tensor
        e: tensor
        name: str
        t: tensor
      msg: '{{function_node __wrapped__SelectV2_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        condition [6,9,9,9,9,9,9], then [2,8,5,9,8,8,8], and else [3,4,7,4,4,4,4]
        must be broadcastable [Op:SelectV2] name: lGPX'
      package: tensorflow
    txt: (all(condition.shape[i] == t.shape[i] or condition.shape[i] == e.shape[i]
      or t.shape[i] == 1 or e.shape[i] == 1 for i in range(-1, -min(len(condition.shape),
      len(t.shape), len(e.shape))-1, -1))) and (condition.shape[i] == e.shape[i])
  - f1_score: 87.58389261744965
    overall_score: 49.791946308724825
    precision: 87.0
    recall: 88.17567567567566
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        condition: tensor
        e: tensor
        name: str
        t: tensor
      msg: 'cannot compute SelectV2 as input #0(zero-based) was expected to be a bool
        tensor but is a float tensor [Op:SelectV2] name: bqyi'
      package: tensorflow
    txt: (dtype(condition) == bool) and (dtype(t) == dtype(e))
  - f1_score: 96.76320272572403
    overall_score: 60.381601362862014
    precision: 94.66666666666667
    recall: 98.95470383275261
- - cot: default
    length: 3
    target:
      choosen_dtype:
        condition: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        e: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        name: str
        t: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in condition.shape) and all(i >= 0 for i in e.shape) and
      all(i >= 0 for i in t.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        condition: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        e: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        name: str
        t: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: condition.rank <= 7 and e.rank <= 7 and t.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
