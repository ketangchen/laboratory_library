args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.nextafter_
package: torch
pass_rate: 97.0
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (3) must match the size of tensor b (2) at non-singleton
        dimension 6
      package: torch
    txt: self.dim() == other.dim() and self.shape() == other.shape()
  - f1_score: 79.85803016858917
    overall_score: 100
    precision: 100.0
    recall: 66.46971935007386
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(other)==int
  - f1_score: 67.21433905899926
    overall_score: 100
    precision: 100.0
    recall: 50.61867266591676
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"nextafter_cpu" not implemented for ''Int'''
      package: torch
    txt: self.dtype != torch.int32
  - f1_score: 99.33774834437087
    overall_score: 100
    precision: 100.0
    recall: 98.68421052631578
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"nextafter_cpu" not implemented for ''Long'''
      package: torch
    txt: (self.dtype != 'Long')
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
