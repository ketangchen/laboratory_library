args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.__or__
package: torch
pass_rate: 87.66519823788546
rules:
- - cot: 'The error occurs because the bitwise OR operation (`bitwise_or_cpu`) is
      not implemented for tensors with the data type `Float`. To prevent this error,
      the data type of both tensors (`self` and `other`) should be changed to a compatible
      type that supports bitwise OR operation. The compatible data types are `half`,
      `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, and `uint64`.
      So, the final formula to prevent the error is:'
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_or_cpu" not implemented for ''Float'''
      package: torch
    txt: (dtype(self) in ["half", "int8", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]) and (dtype(other) in ["half", "int8", "int16", "int32",
      "int64", "uint8", "uint16", "uint32", "uint64"])
  - f1_score: 92.72727272727273
    overall_score: 100
    precision: 100.0
    recall: 86.4406779661017
- - cot: synthesized
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_or_cpu" not implemented for ''Half'''
      package: torch
    txt: (dtype(self) in ["int8", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"]) and (dtype(other) != 'Half')
  - f1_score: 87.08609271523179
    overall_score: 100
    precision: 100.0
    recall: 77.12609970674487
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
