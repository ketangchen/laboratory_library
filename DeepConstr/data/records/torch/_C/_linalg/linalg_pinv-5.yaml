args:
  dtype:
  - Tensor
  - float
  - bool
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - rcond
  - hermitian
  - out
  required:
  - true
  - true
  - false
  - true
name: torch._C._linalg.linalg_pinv
package: torch
pass_rate: 62.33333333333333
rules:
- - cot: The error is due to negative dimensions in the given tensors. The dimensions
      of a tensor should always be positive. Therefore, all dimensions of the tensors
      'out' and 'self' should be greater than or equal to zero to prevent the error.
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        out: tensor
        rcond: float
        self: tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in out.shape) and all(i >= 0 for i in self.shape)
  - f1_score: 90.0
    overall_score: 57.0
    precision: 100.0
    recall: 81.81818181818181
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        hermitian: bool
        out: tensor
        rcond: float
        self: tensor
      msg: 'linalg.pinv: Expected result to be safely castable from Float dtype, but
        got result with dtype Int'
      package: torch
    txt: (((dtype(self) == ComplexFloat) and (dtype(out) == ComplexFloat)) or (dtype(self)
      == dtype(out))) or (dtype(out) == torch.float32)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        out: tensor
        rcond: float
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.shape == self.shape
  - f1_score: 89.1566265060241
    overall_score: 56.57831325301205
    precision: 100.0
    recall: 80.43478260869566
- - cot: "Based on the given runtime information, the error is triggered because the\
      \ input tensor `self` is empty. The function `torch._C._linalg.linalg_pinv`\
      \ expects a tensor with 2 or more dimensions of float, double, cfloat, or cdouble\
      \ types.\n\nTo prevent the error, the input tensor `self` should be a non-empty\
      \ tensor with 2 or more dimensions and of one of the allowed types. \n\nTherefore,\
      \ the constraint can be formulated as:"
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        out: tensor
        rcond: float
        self: tensor
      msg: 'linalg.pinv(Float{[]}): expected a tensor with 2 or more dimensions of
        float, double, cfloat or cdouble types'
      package: torch
    txt: self.dim >= 2 and dtype(self) in ["float32", "float64", "complex64", "complex128"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        hermitian: bool
        out: Tensor
        rcond: float
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        hermitian: bool
        out: Tensor
        rcond: float
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
