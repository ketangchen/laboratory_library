args:
  dtype:
  - Tensor
  - Optional[Tensor]
  - Optional[Tensor]
  - Optional[Tensor]
  - Optional[Tensor]
  - bool
  - float
  - float
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - input
  - weight
  - bias
  - running_mean
  - running_var
  - training
  - momentum
  - eps
  - out
  - save_mean
  - save_invstd
  required:
  - true
  - false
  - false
  - false
  - false
  - true
  - true
  - true
  - true
  - true
  - true
error: <class 'TypeError'>
name: torch.native_batch_norm
package: torch
pass_rate: 0
rules:
- - cot: default
    length: 8
    target:
      choosen_dtype:
        bias: Optional[Tensor]
        eps: float
        input: Tensor
        momentum: float
        out: Tensor
        running_mean: Optional[Tensor]
        running_var: Optional[Tensor]
        save_invstd: Tensor
        save_mean: Tensor
        training: bool
        weight: Optional[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape) and all(i >= 0 for i in weight.shape) and
      all(i >= 0 for i in bias.shape) and all(i >= 0 for i in running_mean.shape)
      and all(i >= 0 for i in running_var.shape) and all(i >= 0 for i in out.shape)
      and all(i >= 0 for i in save_mean.shape) and all(i >= 0 for i in save_invstd.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 8
    target:
      choosen_dtype:
        bias: Optional[Tensor]
        eps: float
        input: Tensor
        momentum: float
        out: Tensor
        running_mean: Optional[Tensor]
        running_var: Optional[Tensor]
        save_invstd: Tensor
        save_mean: Tensor
        training: bool
        weight: Optional[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7 and weight.rank <= 7 and bias.rank <= 7 and running_mean.rank
      <= 7 and running_var.rank <= 7 and out.rank <= 7 and save_mean.rank <= 7 and
      save_invstd.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 8
    target:
      choosen_dtype:
        bias: Optional[Tensor]
        eps: float
        input: Tensor
        momentum: float
        out: Tensor
        running_mean: Optional[Tensor]
        running_var: Optional[Tensor]
        save_invstd: Tensor
        save_mean: Tensor
        training: bool
        weight: Optional[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in input.shape) and all(i >= 0 for i in weight.shape) and
      all(i >= 0 for i in bias.shape) and all(i >= 0 for i in running_mean.shape)
      and all(i >= 0 for i in running_var.shape) and all(i >= 0 for i in out.shape)
      and all(i >= 0 for i in save_mean.shape) and all(i >= 0 for i in save_invstd.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 8
    target:
      choosen_dtype:
        bias: Optional[Tensor]
        eps: float
        input: Tensor
        momentum: float
        out: Tensor
        running_mean: Optional[Tensor]
        running_var: Optional[Tensor]
        save_invstd: Tensor
        save_mean: Tensor
        training: bool
        weight: Optional[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: input.rank <= 7 and weight.rank <= 7 and bias.rank <= 7 and running_mean.rank
      <= 7 and running_var.rank <= 7 and out.rank <= 7 and save_mean.rank <= 7 and
      save_invstd.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
