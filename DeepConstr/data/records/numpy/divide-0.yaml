args:
  dtype:
  - tensor
  - tensor
  - None
  is_pos:
  - true
  - true
  - false
  name:
  - x1
  - x2
  - out
  required:
  - true
  - true
  - false
name: numpy.divide
package: null
pass_rate: 0
rules:
- - cot: default
    length: 3
    target:
      choosen_dtype:
        casting: str
        extobj: None
        order: str
        out: None
        subok: bool
        where: tensor
        x1: tensor
        x2: tensor
      msg: negative dimensions are not allowed
      package: null
    txt: all(i >= 0 for i in x1.shape) and all(i >= 0 for i in x2.shape) and all(i
      >= 0 for i in where.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        casting: str
        extobj: None
        order: str
        out: None
        subok: bool
        where: tensor
        x1: tensor
        x2: tensor
      msg: Too large tensor shape
      package: null
    txt: x1.rank <= 7 and x2.rank <= 7 and where.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 0
    target:
      choosen_dtype:
        out: None
        x1: tensor
        x2: tensor
      msg: negative dimensions are not allowed
      package: null
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 0
    target:
      choosen_dtype:
        out: None
        x1: tensor
        x2: tensor
      msg: Too large tensor shape
      package: null
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
