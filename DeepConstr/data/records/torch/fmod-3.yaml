args:
  dtype:
  - Tensor
  - number
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.fmod
package: torch
pass_rate: 100
rules:
- - cot: The error is caused because the shape dimensions in the output tensor are
      negative, which is not allowed. To prevent this error, the shape dimensions
      in the output tensor should be non-negative.
    length: 1
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(dim >= 0 for dim in out.shape)
  - f1_score: 95.4653937947494
    overall_score: 59.7326968973747
    precision: 100.0
    recall: 91.32420091324201
- - cot: The error is triggered because the result type Float cannot be cast to the
      desired output type Bool. To prevent this error, the output type should be changed
      to Float.
    length: 1
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Bool
      package: torch
    txt: dtype(out) == Float
  - f1_score: 89.8876404494382
    overall_score: 56.9438202247191
    precision: 100.0
    recall: 81.63265306122447
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (dtype(self) == Float32) or (dtype(out) == Int)
  - f1_score: 67.34006734006734
    overall_score: 100
    precision: 100.0
    recall: 50.76142131979695
- - cot: '`out` tensor is of shape [0, 9, 9, 9, 9] and `self` tensor is of shape [8,
      9, 2, 7]. The error is triggered because we are trying to resize the `out` tensor
      which is not resizable. To prevent this error, the shape of the `out` tensor
      should match the shape of the operation result, which is the shape of the `self`
      tensor. Therefore, the condition to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        other: int
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 72.59528130671507
    overall_score: 48.29764065335753
    precision: 100.0
    recall: 56.98005698005698
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: number
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: number
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
