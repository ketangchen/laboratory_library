args:
  dtype:
  - Tensor
  - str
  - Optional[List[int]]
  - bool
  - None
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - ord
  - dim
  - keepdim
  - dtype
  - out
  required:
  - true
  - true
  - false
  - false
  - false
  - true
name: torch._C._linalg.linalg_norm
package: torch
pass_rate: 38.0
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 67.18924972004478
    overall_score: 45.59462486002239
    precision: 100.0
    recall: 50.5902192242833
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.norm expected out tensor dtype Float but got: ComplexDouble'
      package: torch
    txt: (out.dtype == torch.float) or (dtype(out) == torch.float64)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Based on the given runtime information, the error occurred because the function\
      \ `torch._C._linalg.linalg_norm` expected a floating point or complex tensor\
      \ as input, but received an integer tensor instead.\n\nTo prevent this error,\
      \ the input tensor `self` should be a floating point or complex tensor. \n\n\
      The constraint can be formulated as:"
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.matrix_norm: Expected a floating point or complex tensor as input.
        Got Int'
      package: torch
    txt: dtype(self) in [float16, float32, float64, complex64, complex128]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is due to the fact that order 1 is not supported in the linalg.matrix_norm
      function. Therefore, the ''ord'' value should be corrected to be a supported
      value. In this case, for matrix norm, it should be either ''fro'' or ''nuc''.
      So, ord should be in [''fro'', ''nuc'']. Op : in, and Right : [''fro'', ''nuc''].'
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.matrix_norm: Order 1 not supported.'
      package: torch
    txt: ord in ['fro', 'nuc']
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Based on the given runtime information, the error is triggered because the\
      \ input tensor `self` has less than 2 dimensions. To prevent this error, we\
      \ can add a constraint that ensures the input tensor `self` has at least 2 dimensions.\
      \ \n\nThe constraint can be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.matrix_norm: The input tensor A must have at least 2 dimensions.'
      package: torch
    txt: self.dim() >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: The error is due to the value of `ord` being set to `inf`, which is not supported.
      To prevent the error, the value of `ord` should be changed to a supported order
      value.
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.matrix_norm: Order inf not supported.'
      package: torch
    txt: ord != inf
  - f1_score: 70.41036717062636
    overall_score: 30.166666666666668
    precision: 54.333333333333336
    recall: 100.0
- - cot: The error is caused by providing a 4D input tensor to the `torch._C._linalg.linalg_norm`
      function, but the function expects the input to be either 1D or 2D when the
      `ord` argument is specified. Therefore, the constraint to prevent the error
      is to ensure that the input tensor has either 1 or 2 dimensions.
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.norm: If dim is not specified but ord is, the input must be 1D
        or 2D. Got 5D.'
      package: torch
    txt: self.dim() in [1, 2]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is due to the order value "tAnf" not being supported. The order
      value should be one of the supported norms for matrix_norm, such as "fro", "nuc",
      "inf", "nuc", "1", or "2". Therefore, the ord value should be one of these supported
      norms. Op : in, and Right : ["fro", "nuc", "inf", "nuc", "1", "2"].'
    length: 1
    target:
      choosen_dtype:
        dim: None
        dtype: None
        keepdim: bool
        ord: str
        out: tensor
        self: tensor
      msg: 'linalg.matrix_norm: Order dBSo not supported.'
      package: torch
    txt: ord in ["fro", "nuc", "inf", "nuc", "1", "2"]
  - f1_score: 63.914373088685025
    overall_score: 37.833333333333336
    precision: 69.66666666666667
    recall: 59.03954802259888
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        dtype: None
        keepdim: bool
        ord: str
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        dtype: None
        keepdim: bool
        ord: str
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
