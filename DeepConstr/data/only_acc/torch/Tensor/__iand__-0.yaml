args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.__iand__
package: torch
pass_rate: 23.647294589178355
rules:
- - cot: "Error is triggered because the size of tensor a (3) does not match the size\
      \ of tensor b (9) at non-singleton dimension 0. \n\nTo prevent this error, we\
      \ need to ensure that the sizes of the tensors at non-singleton dimension 0\
      \ are either equal or one of them has a size of 1.\n\nThe constraint can be\
      \ formulated as:"
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (3) must match the size of tensor b (9) at non-singleton
        dimension 0
      package: torch
    txt: self.shape[0] == 1
  - f1_score: 81.37448044849498
    overall_score: 45.68724022424749
    precision: 96.2655601659751
    recall: 70.47316248316643
- - cot: 'Based on the given runtime information, the error occurs because the "bitwise_and_cpu"
      operation is not implemented for the ''Float'' dtype. The tensors ''self'' and
      ''other'' are both provided as float32 dtype, which is not compatible with the
      "bitwise_and_cpu" operation.


      To prevent the error, the dtype of ''self'' and ''other'' should be changed
      to one of the allowed types for the "bitwise_and_cpu" operation, which are [''half'',
      ''int16'', ''int32'', ''int64'', ''uint8'', ''uint16'', ''uint32'', ''uint64''].


      So, the condition to prevent the error is:'
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_and_cpu" not implemented for ''Float'''
      package: torch
    txt: dtype(self) in ["half", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"] and dtype(other) in ["half", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]
  - f1_score: 67.07152496626182
    overall_score: 100
    precision: 100.0
    recall: 50.45685279187817
- - cot: synthesized
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: output with shape [] doesn't match the broadcast shape [5]
      package: torch
    txt: (self.shape == other.shape) and (self.shape[i] == 1)
  - f1_score: 67.58454985404711
    overall_score: 48.4
    precision: 93.8
    recall: 52.82178893300925
- - cot: ''
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(self) == dtype(other)
  - f1_score: 66.93494299128102
    overall_score: 100
    precision: 100.0
    recall: 50.30241935483871
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
