args:
  dtype:
  - Tensor
  - float
  - bool
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - rcond
  - hermitian
  required:
  - true
  - true
  - false
name: torch._C._linalg.linalg_pinv
package: torch
pass_rate: 97.0
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        rcond: float
        self: tensor
      msg: 'linalg.pinv(Int{[3, 5, 5, 5, 5, 5, 5]}): expected a tensor with 2 or more
        dimensions of float, double, cfloat or cdouble types'
      package: torch
    txt: self.dim >= 2 and self.dtype in ["float32", "float64", "complex64", "complex128"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is triggered because the input tensor is not a batch of square
      matrices. The shape of the input tensor is [9, 4], while it should be [batch_size,
      matrix_size, matrix_size].


      To prevent this error, we need to ensure that the input tensor is a batch of
      square matrices. The constraint for the input tensor can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        rcond: float
        self: tensor
      msg: 'linalg.eigh: A must be batches of square matrices, but they are 1 by 3
        matrices'
      package: torch
    txt: self.shape[-1] == self.shape[-2]
  - f1_score: 66.36363636363637
    overall_score: 45.18181818181819
    precision: 97.33333333333334
    recall: 50.3448275862069
- - cot: default
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        rcond: float
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        rcond: float
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
