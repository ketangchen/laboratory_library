args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.ldexp
package: torch
pass_rate: 100
rules:
- - cot: 'Error is triggered because the size of tensor a (9) does not match the size
      of tensor b (2) at non-singleton dimension 6. To prevent this error, the dimensions
      and shapes of tensors a and b should be checked. Therefore, we can formulate
      the constraint as follows:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (3) at non-singleton
        dimension 6
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 94.7867298578199
    overall_score: 100
    precision: 100.0
    recall: 90.09009009009009
- - cot: 'The error occurs because the output tensor has a dtype of Int, but the result
      of the torch.ldexp function is a Float. Therefore, the dtype of the output tensor
      should be Float. Left : dtype(out), Op : ==, Right : Float'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(out)==torch.float
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 75.75757575757576
    overall_score: 49.87878787878788
    precision: 100.0
    recall: 60.97560975609756
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape) and
      all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
