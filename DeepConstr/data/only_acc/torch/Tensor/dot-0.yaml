args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - tensor
  required:
  - true
  - true
name: torch.Tensor.dot
package: torch
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        self: tensor
        tensor: tensor
      msg: 1D tensors expected, but got 4D and 6D tensors
      package: torch
    txt: (self.dim() == tensor.dim()) and (tensor.dim() == 1)
  - f1_score: 99.30486593843098
    overall_score: 55.65243296921549
    precision: 100.0
    recall: 98.61932938856016
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        self: tensor
        tensor: tensor
      msg: inconsistent tensor size, expected tensor [3] and src [9] to have the same
        number of elements, but got 3 and 9 elements respectively
      package: torch
    txt: self.size() == tensor.size()
  - f1_score: 97.56097560975608
    overall_score: 100
    precision: 100.0
    recall: 95.23809523809523
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        self: tensor
        tensor: tensor
      msg: 'dot : expected both vectors to have same dtype, but found Int and Float'
      package: torch
    txt: dtype(self) == dtype(tensor)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        tensor: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in tensor.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        self: Tensor
        tensor: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and tensor.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
