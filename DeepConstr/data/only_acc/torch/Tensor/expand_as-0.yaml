args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.expand_as
package: torch
pass_rate: 6.6000000000000005
rules:
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: 'The expanded size of the tensor (2) must match the existing size (5) at
        non-singleton dimension 6.  Target sizes: [4, 2, 5, 2, 2, 2, 2].  Tensor sizes:
        [5, 5, 5, 5, 5, 5]'
      package: torch
    txt: (((self.size(3) == 1) and (self.shape[i] == 1)) and (self.size(5) == other.size(5)))
      and (self.size() == other.size())
  - f1_score: 69.39625260235947
    overall_score: 100
    precision: 100.0
    recall: 53.13496280552603
- - cot: 'The error is triggered because the shape of the tensor being expanded to
      (other) is larger than the shape of the tensor being expanded (self). The shape
      of the expanded tensor should be equal to or smaller than the shape of the tensor
      being expanded.


      Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: 'Too large tensor shape: shape = [9, 9, 9, 9, 9, 9, 9, 9, 9]'
      package: torch
    txt: self.shape[i] >= other.shape[i]
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: 'expand(torch.FloatTensor{[1, 1]}, size=[]): the number of sizes provided
        (0) must be greater or equal to the number of dimensions in the tensor (2)'
      package: torch
    txt: self.dim <= len(other.size())
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
