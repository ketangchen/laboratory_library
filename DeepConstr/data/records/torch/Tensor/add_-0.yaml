args:
  dtype:
  - Tensor
  - Tensor
  - number
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - alpha
  required:
  - true
  - true
  - false
name: torch.Tensor.add_
package: torch
pass_rate: 96.6
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        alpha: int
        other: tensor
        self: tensor
      msg: output with shape [1] doesn't match the broadcast shape [1, 9, 8, 2, 9]
      package: torch
    txt: self.dim() == other.dim() and (other.dim() == 0 or self.shape() == other.shape())
  - f1_score: 70.97232079489
    overall_score: 47.486160397445
    precision: 100.0
    recall: 55.00550055005501
- - cot: default
    length: 2
    target:
      choosen_dtype:
        alpha: number
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        alpha: number
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        alpha: number
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        alpha: number
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
