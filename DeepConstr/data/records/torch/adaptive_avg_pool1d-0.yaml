args:
  dtype:
  - Tensor
  - List[int]
  is_pos:
  - true
  - false
  name:
  - self
  - output_size
  required:
  - true
  - true
name: torch.adaptive_avg_pool1d
package: torch
pass_rate: 100
rules:
- - cot: ''
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: adaptive_avg_pool1d() argument 'output_size' should contain one int (got
        2)
      package: torch
    txt: len(output_size) == 1
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error message indicates that the elements of `output_size` must be greater
      than or equal to 0, but it received {1, -1}. Therefore, the constraints to prevent
      this error would be:'
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: 'adaptive_avg_pool2d: elements of output_size must be greater than or equal
        to 0 but received {1, -1}'
      package: torch
    txt: all(o >= 0 for o in output_size)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    target:
      choosen_dtype:
        output_size: list[int]
        self: tensor
      msg: 'Expected 2 to 3 dimensions, but got 1-dimensional tensor for argument
        #1 ''self'' (while checking arguments for adaptive_avg_pool1d)'
      package: torch
    txt: self.dim() == 3
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        output_size: List[int]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        output_size: List[int]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
