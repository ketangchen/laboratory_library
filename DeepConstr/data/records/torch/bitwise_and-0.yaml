args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.bitwise_and
package: torch
pass_rate: 99.66666666666667
rules:
- - cot: The error occurs because the bitwise_and function is not implemented for
      floating-point tensors. To prevent this error, the input tensors 'self' and
      'other' should have a data type that is compatible with bitwise_and. The allowed
      data types for 'self' and 'other' are int8, int16, int32, int64, uint8, uint16,
      uint32, uint64.
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_and_cpu" not implemented for ''Float'''
      package: torch
    txt: dtype(self) in ["int8", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"] and dtype(other) in ["int8", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (8) at non-singleton
        dimension 2
      package: torch
    txt: self.shape[4] == 1
  - f1_score: 95.12605042016807
    overall_score: 59.563025210084035
    precision: 94.33333333333334
    recall: 95.9322033898305
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
