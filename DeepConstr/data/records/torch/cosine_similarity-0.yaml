args:
  dtype:
  - Tensor
  - Tensor
  - int
  - float
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - x1
  - x2
  - dim
  - eps
  required:
  - true
  - true
  - false
  - false
name: torch.cosine_similarity
package: torch
pass_rate: 80.66666666666666
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        eps: float
        x1: tensor
        x2: tensor
      msg: Dimension out of range (expected to be in range of [-7, 6], but got 9)
      package: torch
    txt: dim < 6
  - f1_score: 76.05633802816901
    overall_score: 50.028169014084504
    precision: 99.0
    recall: 61.74636174636174
- - cot: 'Error is triggered because the size of tensor a (5) must match the size
      of tensor b (2) at non-singleton dimension 6. Let''s see what the args were.
      The dimensions and shapes of x1 and x2 are given. Therefore, we can formulate
      the condition as follows:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        eps: float
        x1: tensor
        x2: tensor
      msg: The size of tensor a (7) must match the size of tensor b (4) at non-singleton
        dimension 1
      package: torch
    txt: x1.dim() == x2.dim() and x1.shape[6] == x2.shape[6]
  - f1_score: 98.32775919732441
    overall_score: 61.163879598662206
    precision: 98.0
    recall: 98.65771812080537
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        eps: float
        x1: Tensor
        x2: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in x1.shape) and all(i >= 0 for i in x2.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        eps: float
        x1: Tensor
        x2: Tensor
      msg: Too large tensor shape
      package: torch
    txt: x1.rank <= 7 and x2.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
