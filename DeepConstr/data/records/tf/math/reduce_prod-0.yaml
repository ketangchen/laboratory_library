args:
  dtype:
  - int,list[int]
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - bool
  - str
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - axis
  - input_tensor
  - keepdims
  - name
  required:
  - false
  - true
  - false
  - false
name: tf.math.reduce_prod
package: tensorflow
pass_rate: 84.66666666666667
rules:
- - cot: 'The error is due to an invalid reduction dimension. The function is trying
      to reduce on dimension 9, but the input tensor only has 2 dimensions, indexed
      from 0. So, the maximum valid dimension for reduction would be 1. Therefore,
      the condition to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        axis: int
        input_tensor: tensor
        keepdims: bool
        name: str
      msg: '{{function_node __wrapped__Prod_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Invalid reduction dimension (67 for input with 4 dimension(s) [Op:Prod] name:
        GukZ'
      package: tensorflow
    txt: (axis < input_tensor.rank)
  - f1_score: 86.79245283018868
    overall_score: 41.333333333333336
    precision: 76.66666666666667
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        axis: int,list[int]
        input_tensor: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        keepdims: bool
        name: str
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in input_tensor.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        axis: int,list[int]
        input_tensor: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        keepdims: bool
        name: str
      msg: Too large tensor shape
      package: tensorflow
    txt: input_tensor.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
