args:
  dtype:
  - Tensor
  - bool
  is_pos:
  - false
  - false
  name:
  - A
  - pivot
  required:
  - true
  - false
name: torch._C._linalg.linalg_lu_factor
package: torch
pass_rate: 100
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        A: tensor
        pivot: bool
      msg: 'linalg.lu_factor: LU without pivoting is not implemented on the CPU'
      package: torch
    txt: pivot
  - f1_score: 93.0232558139535
    overall_score: 100
    precision: 100.0
    recall: 86.95652173913044
- - cot: 'Error is triggered because the tensor A is expected to have 2 or more dimensions,
      but it has size []. To prevent this error, we can add a constraint to check
      if the tensor A has 2 or more dimensions. If not, the error can be avoided.
      Therefore, the constraint is:'
    length: 1
    target:
      choosen_dtype:
        A: tensor
        pivot: bool
      msg: 'torch.lu_factor: Expected tensor with 2 or more dimensions. Got size:
        [] instead'
      package: torch
    txt: A.dim() >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        A: tensor
        pivot: bool
      msg: '"lu_cpu" not implemented for ''Int'''
      package: torch
    txt: dtype(A) == float32
  - f1_score: 97.08737864077668
    overall_score: 100
    precision: 100.0
    recall: 94.33962264150942
- - cot: default
    length: 1
    target:
      choosen_dtype:
        A: Tensor
        pivot: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in A.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        A: Tensor
        pivot: bool
      msg: Too large tensor shape
      package: torch
    txt: A.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
