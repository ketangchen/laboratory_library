args:
  dtype:
  - Tensor
  - Optional[List[int]]
  - Optional[List[int]]
  - Optional[str]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - s
  - dim
  - norm
  - out
  required:
  - true
  - false
  - false
  - false
  - true
name: torch._C._fft.fft_rfftn
package: torch
pass_rate: 94.88054607508532
rules:
- - cot: 'Based on the given runtime information, the error is caused by an invalid
      normalization mode. The value provided for ''norm'' is "KArd", which is not
      a valid normalization mode. The valid normalization modes are "backward" and
      "ortho". Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        dim: None
        norm: str
        out: tensor
        s: None
        self: tensor
      msg: 'Invalid normalization mode: "tVnM"'
      package: torch
    txt: norm in ["backward", "ortho"]
  - f1_score: 94.48818897637796
    overall_score: 100
    precision: 100.0
    recall: 89.55223880597015
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: None
        norm: str
        out: tensor
        s: None
        self: tensor
      msg: rfftn expects a complex output tensor, but got Float
      package: torch
    txt: (self.dim()==4) and (out.dtype in [torch.complex64, torch.complex128])
  - f1_score: 99.50248756218905
    overall_score: 100
    precision: 100.0
    recall: 99.00990099009901
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: None
        norm: None
        out: tensor
        s: None
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: (out.rank==self.rank and all(out.shape[i]==self.shape[i] for i in range(out.rank)))
      and (out.shape == self.shape)
  - f1_score: 76.53061224489797
    overall_score: 100
    precision: 100.0
    recall: 61.98347107438017
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        norm: Optional[str]
        out: Tensor
        s: Optional[List[int]]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: Optional[List[int]]
        norm: Optional[str]
        out: Tensor
        s: Optional[List[int]]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
