args:
  dtype:
  - str
  - int8,int16,int32,int64,uint8,uint16,uint32,uint64
  - int8,int16,int32,int64,uint8,uint16,uint32,uint64
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.raw_ops.LeftShift
package: tensorflow
pass_rate: 100
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: "Value for attr 'T' of float is not in the list of allowed values: int8,\
        \ int16, int32, int64, uint8, uint16, uint32, uint64\n\t; NodeDef: {{node\
        \ LeftShift}}; Op<name=LeftShift; signature=x:T, y:T -> z:T; attr=T:type,allowed=[DT_INT8,\
        \ DT_INT16, DT_INT32, DT_INT64, DT_UINT8, DT_UINT16, DT_UINT32, DT_UINT64]>\
        \ [Op:LeftShift] name: pyUc"
      package: tensorflow
    txt: dtype(x) in ["int8", "int16", "int32", "int64", "uint8", "uint16", "uint32",
      "uint64"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: Based on the given runtime information, the constraint that would prevent
      the error is `dtype(y) == dtype(x)`.
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute LeftShift as input #1(zero-based) was expected to be a
        uint64 tensor but is a float tensor [Op:LeftShift] name: duIe'
      package: tensorflow
    txt: dtype(y) == dtype(x)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__LeftShift_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [4,4,4,4,4,4,4] vs. [5,8,2,1,3,8,5] [Op:LeftShift] name:
        dfiL'
      package: tensorflow
    txt: (len(x) == len(y)) and (all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or
      y.shape[i] == 1 for i in range(-1, -min(len(x.shape), len(y.shape))-1, -1)))
  - f1_score: 96.7741935483871
    overall_score: 100
    precision: 100.0
    recall: 93.75
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__LeftShift_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [5] vs. [2] [Op:LeftShift] name: dVdE'
      package: tensorflow
    txt: x.shape == y.shape
  - f1_score: 66.815144766147
    overall_score: 100
    precision: 100.0
    recall: 50.16722408026756
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: int8,int16,int32,int64,uint8,uint16,uint32,uint64
        y: int8,int16,int32,int64,uint8,uint16,uint32,uint64
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: int8,int16,int32,int64,uint8,uint16,uint32,uint64
        y: int8,int16,int32,int64,uint8,uint16,uint32,uint64
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
