args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.remainder
package: torch
pass_rate: 100
rules:
- - cot: "Based on the given runtime information, the error can be prevented by ensuring\
      \ that the dimensions and shape of the two tensors are consistent. In this case,\
      \ the size of tensor a (7) must match the size of tensor b (4) at non-singleton\
      \ dimension 6. \n\nThe constraint to prevent the error can be formulated as:"
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (8) at non-singleton
        dimension 2
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 92.59259259259261
    overall_score: 58.296296296296305
    precision: 100.0
    recall: 86.20689655172414
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
