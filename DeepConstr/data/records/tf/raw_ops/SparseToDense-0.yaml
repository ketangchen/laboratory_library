args:
  dtype:
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - str
  - int32,int64
  - int32,int64
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - bool
  is_pos:
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - default_value
  - name
  - output_shape
  - sparse_indices
  - sparse_values
  - validate_indices
  required:
  - true
  - false
  - true
  - true
  - true
  - false
name: tf.raw_ops.SparseToDense
package: tensorflow
pass_rate: 0.0
rules:
- - cot: 'The error is caused by the `sparse_indices` tensor having a data type of
      float, which is not allowed. The allowed data types for `sparse_indices` are
      int32 and int64. Therefore, the constraint to prevent this error is:'
    length: 1
    target:
      choosen_dtype:
        default_value: tensor
        name: str
        output_shape: tensor
        sparse_indices: tensor
        sparse_values: tensor
        validate_indices: bool
      msg: "Value for attr 'Tindices' of float is not in the list of allowed values:\
        \ int32, int64\n\t; NodeDef: {{node SparseToDense}}; Op<name=SparseToDense;\
        \ signature=sparse_indices:Tindices, output_shape:Tindices, sparse_values:T,\
        \ default_value:T -> dense:T; attr=validate_indices:bool,default=true; attr=T:type;\
        \ attr=Tindices:type,allowed=[DT_INT32, DT_INT64]> [Op:SparseToDense] name:\
        \ LGtm"
      package: tensorflow
    txt: dtype(sparse_indices) in ["int32", "int64"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        default_value: tensor
        name: str
        output_shape: tensor
        sparse_indices: tensor
        sparse_values: tensor
        validate_indices: bool
      msg: 'cannot compute SparseToDense as input #1(zero-based) was expected to be
        a int32 tensor but is a float tensor [Op:SparseToDense] name: XWuP'
      package: tensorflow
    txt: (dtype(output_shape) == int32) and (dtype(sparse_indices) == int32)
  - f1_score: 94.68354430379748
    overall_score: 48.25
    precision: 93.5
    recall: 95.89743589743588
- - cot: The error is triggered because the shape of sparse_indices is [8,8,5,2,2,5,5].
      To prevent this error, the shape of sparse_indices should be a scalar, vector,
      or matrix. Therefore, the constraint that prevents the error is
    length: 1
    target:
      choosen_dtype:
        default_value: tensor
        name: str
        output_shape: tensor
        sparse_indices: tensor
        sparse_values: tensor
        validate_indices: bool
      msg: '{{function_node __wrapped__SparseToDense_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        sparse_indices should be a scalar, vector, or matrix, got shape [8,2,9,2,2]
        [Op:SparseToDense] name: tWCC'
      package: tensorflow
    txt: rank(sparse_indices) <= 2
  - f1_score: 97.323600973236
    overall_score: 100
    precision: 100.0
    recall: 94.7867298578199
- - cot: 'output_shape must be rank 1, got shape [2,4,8,9,9]. So, the rank of the
      output_shape tensor should be equal to 1. Therefore, the constraint is:'
    length: 1
    target:
      choosen_dtype:
        default_value: tensor
        name: str
        output_shape: tensor
        sparse_indices: tensor
        sparse_values: tensor
        validate_indices: bool
      msg: '{{function_node __wrapped__SparseToDense_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        output_shape must be rank 1, got shape [1,9] [Op:SparseToDense] name: tFPR'
      package: tensorflow
    txt: output_shape.rank == 1
  - f1_score: 96.61835748792271
    overall_score: 100
    precision: 100.0
    recall: 93.45794392523365
