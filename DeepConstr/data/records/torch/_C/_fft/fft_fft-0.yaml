args:
  dtype:
  - Tensor
  - Optional[int]
  - int
  - Optional[str]
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - n
  - dim
  - norm
  required:
  - true
  - false
  - false
  - false
name: torch._C._fft.fft_fft
package: torch
pass_rate: 100
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        self: tensor
      msg: 'MKL FFT error: Intel MKL DFTI ERROR: Inconsistent configuration parameters'
      package: torch
    txt: self.shape[0] == n
  - f1_score: 67.5219446320054
    overall_score: 45.7609723160027
    precision: 100.0
    recall: 50.9683995922528
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        self: tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: (n > 0) and (dim > 0)
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: str
        self: tensor
      msg: 'Invalid normalization mode: "jfhs"'
      package: torch
    txt: norm == "backward"
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: 'Based on the given runtime information, the error is triggered because the
      provided normalization mode "SWjW" is not a valid mode. The valid normalization
      modes are "forward" and "backward". Therefore, the constraint to prevent the
      error is:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: str
        self: tensor
      msg: 'Invalid normalization mode: "SWjW"'
      package: torch
    txt: norm in ["forward", "backward"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is triggered because the number of data points specified is invalid.
      The value of ''n'' should be a positive integer representing the number of data
      points. In this case, ''n'' is set to -2 which is not a valid value.


      To prevent this error in the future, we can add a constraint to ensure that
      ''n'' is a positive integer. The constraint can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        self: tensor
      msg: Invalid number of data points (-2) specified
      package: torch
    txt: n > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Based on the given runtime information, the constraint that prevents the\
      \ error is to ensure that the tensor has the specified dimension before calling\
      \ the `torch._C._fft.fft_fft` function. \n\nThe condition to prevent the error\
      \ can be formulated as:"
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: str
        self: tensor
      msg: Dimension specified as 1 but tensor has no dimensions
      package: torch
    txt: len(self.shape) >= dim
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: None
        self: tensor
      msg: Dimension out of range (expected to be in range of [-1, 0], but got 1)
      package: torch
    txt: 1 < len(self.shape)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
