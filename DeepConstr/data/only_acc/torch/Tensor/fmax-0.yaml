args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.fmax
package: torch
pass_rate: 82.0
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (7) must match the size of tensor b (5) at non-singleton
        dimension 2
      package: torch
    txt: self.shape[2] == other.shape[2]
  - f1_score: 68.02721088435375
    overall_score: 100
    precision: 100.0
    recall: 51.54639175257733
- - cot: 'The error message indicates that the shape of the tensor `self` is empty,
      while the shape of the `other` tensor is `[8, 9, 9, 9, 9, 6, 9, 9, 9]`. To prevent
      this error, we need to ensure that the shape of `self` matches the shape of
      `other` at all dimensions.


      The constraint can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: 'Too large tensor shape: shape = [8, 9, 9, 9, 9, 6, 9, 9, 9]'
      package: torch
    txt: self.shape == other.shape
  - f1_score: 65.89986468200271
    overall_score: 51.699999999999996
    precision: 97.39999999999999
    recall: 49.79550102249489
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
