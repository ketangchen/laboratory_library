args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - false
  - false
  - false
  name:
  - real
  - imag
  - out
  required:
  - true
  - true
  - true
name: torch.complex
package: torch
pass_rate: 0.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        imag: tensor
        out: tensor
        real: tensor
      msg: Expected object of scalar type ComplexFloat but got scalar type Float for
        argument 'out'
      package: torch
    txt: (out.dtype == torch.complex) and (dtype(out) == dtype(real))
  - f1_score: 96.93053311793216
    overall_score: 100
    precision: 100.0
    recall: 94.04388714733544
- - cot: default
    length: 3
    target:
      choosen_dtype:
        imag: Tensor
        out: Tensor
        real: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in real.shape) and all(i >= 0 for i in imag.shape) and all(i
      >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        imag: Tensor
        out: Tensor
        real: Tensor
      msg: Too large tensor shape
      package: torch
    txt: real.rank <= 7 and imag.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
