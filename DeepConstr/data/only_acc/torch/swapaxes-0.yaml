args:
  dtype:
  - Tensor
  - int
  - int
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - axis0
  - axis1
  required:
  - true
  - true
  - true
name: torch.swapaxes
package: torch
pass_rate: 90.33333333333333
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        axis0: int
        axis1: int
        self: tensor
      msg: Dimension out of range (expected to be in range of [-2, 1], but got 78)
      package: torch
    txt: (axis0 >= -len(self.shape) and axis0 < len(self.shape) and axis1 >= -len(self.shape)
      and axis1 < len(self.shape)) and (axis0 < 2)
  - f1_score: 81.05726872246696
    overall_score: 47.5
    precision: 92.0
    recall: 72.44094488188976
- - cot: default
    length: 1
    target:
      choosen_dtype:
        axis0: int
        axis1: int
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        axis0: int
        axis1: int
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
