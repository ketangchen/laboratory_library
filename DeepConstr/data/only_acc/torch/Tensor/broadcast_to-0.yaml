args:
  dtype:
  - Tensor
  - List[int]
  is_pos:
  - true
  - false
  name:
  - self
  - size
  required:
  - true
  - true
name: torch.Tensor.broadcast_to
package: torch
pass_rate: 13.333333333333334
rules:
- - cot: 'The error is triggered because the expanded size of the tensor (6) does
      not match the existing size (5) at non-singleton dimension 0. To prevent the
      error, we need to ensure that the expanded size matches the existing size at
      all dimensions. Therefore, the constraint can be formulated as:'
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'The expanded size of the tensor (6) must match the existing size (5) at
        non-singleton dimension 0.  Target sizes: [6].  Tensor sizes: [5]'
      package: torch
    txt: size[0] == self.shape[0]
  - f1_score: 68.31882116543872
    overall_score: 100
    precision: 100.0
    recall: 51.88199389623601
- - cot: Error is triggered because the number of sizes provided is not greater or
      equal to the number of dimensions in the tensor. From the runtime information,
      we can see that the size provided is an empty list and the number of dimensions
      in the tensor is 1. Therefore, we can prevent the error by ensuring that the
      number of sizes provided is greater than or equal to the number of dimensions
      in the tensor.
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'expand(torch.FloatTensor{[3]}, size=[]): the number of sizes provided
        (0) must be greater or equal to the number of dimensions in the tensor (1)'
      package: torch
    txt: len(size) >= self.dim()
  - f1_score: 99.02912621359224
    overall_score: 100
    precision: 100.0
    recall: 98.07692307692308
- - cot: 'The error is triggered because the expanded size of the tensor is not allowed
      in a leading, non-existing dimension. In this case, the expanded size is -1.
      To prevent the error, the size of the tensor in the leading dimension should
      be a positive integer. Therefore, the constraint can be formulated as:'
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: The expanded size of the tensor (-1) isn't allowed in a leading, non-existing
        dimension 1
      package: torch
    txt: size[0] > 0
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: divided
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'numel: integer multiplication overflow'
      package: torch
    txt: size[0] > -3
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        size: List[int]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        size: List[int]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
