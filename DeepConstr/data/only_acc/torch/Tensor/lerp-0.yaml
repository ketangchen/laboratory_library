args:
  dtype:
  - Tensor
  - Tensor
  - number
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - end
  - weight
  required:
  - true
  - true
  - true
name: torch.Tensor.lerp
package: torch
pass_rate: 100
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        end: tensor
        self: tensor
        weight: int
      msg: The size of tensor a (9) must match the size of tensor b (7) at non-singleton
        dimension 6
      package: torch
    txt: self.shape[2] == end.shape[2]
  - f1_score: 67.88866259334691
    overall_score: 100
    precision: 100.0
    recall: 51.3874614594039
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        end: tensor
        self: tensor
        weight: int
      msg: expected dtype float for `end` but got dtype int
      package: torch
    txt: dtype(end) == dtype(self)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        end: tensor
        self: tensor
        weight: int
      msg: '"lerp_kernel_scalar" not implemented for ''Int'''
      package: torch
    txt: end.dtype in [torch.float16, torch.float32, torch.float64]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        end: Tensor
        self: Tensor
        weight: number
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in end.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        end: Tensor
        self: Tensor
        weight: number
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and end.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
