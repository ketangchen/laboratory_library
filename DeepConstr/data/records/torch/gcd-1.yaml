args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.gcd
package: torch
pass_rate: 0.0
rules:
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: ((out.rank==other.rank and all(out.shape[i]==other.shape[i] for i in range(out.rank)))
      and (all(out.shape[i] == self.shape[i] for i in range(self.rank)))) and (out.shape
      == other.shape)
  - f1_score: 77.22007722007723
    overall_score: 42.610038610038615
    precision: 100.0
    recall: 62.8930817610063
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: '"gcd_cpu" not implemented for ''Float'''
      package: torch
    txt: (dtype(out) != "Float")
  - f1_score: 93.89671361502347
    overall_score: 58.948356807511736
    precision: 100.0
    recall: 88.49557522123894
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (8) must match the size of tensor b (6) at non-singleton
        dimension 6
      package: torch
    txt: self.shape[4] == 9
  - f1_score: 91.6030534351145
    overall_score: 100
    precision: 100.0
    recall: 84.50704225352112
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape) and
      all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
