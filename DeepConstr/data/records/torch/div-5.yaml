args:
  dtype:
  - Tensor
  - Tensor
  - Optional[str]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - other
  - rounding_mode
  - out
  required:
  - true
  - true
  - false
  - true
name: torch.div
package: torch
pass_rate: 94.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        rounding_mode: str
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (dtype(self)==dtype(out)) or (dtype(out) == float)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        rounding_mode: str
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (8) at non-singleton
        dimension 6
      package: torch
    txt: ((all(self.shape[i] == other.shape[i] or self.shape[i] == 1 or other.shape[i]
      == 1 for i in range(-1, -min(len(self.shape), len(other.shape))-1, -1))) or
      (self.shape[6] == other.shape[6])) or (self.dim == other.dim and self.shape[1]
      == other.shape[1])
  - f1_score: 92.76143314884942
    overall_score: 58.38071657442471
    precision: 96.98492462311557
    recall: 88.89043963712491
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        rounding_mode: None
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == other.rank and all(out.shape[i] == other.shape[i] for i in range(out.rank))
  - f1_score: 67.68189509306261
    overall_score: 45.840947546531304
    precision: 100.0
    recall: 51.150895140664964
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        rounding_mode: str
        self: tensor
      msg: The size of tensor a (8) must match the size of tensor b (9) at non-singleton
        dimension 1
      package: torch
    txt: (self.dim == other.dim) or (all(self.shape[i] == other.shape[i] or self.shape[i]
      == 1 or other.shape[i] == 1 for i in range(-1, -min(len(self.shape), len(other.shape))-1,
      -1)))
  - f1_score: 88.7711098797851
    overall_score: 56.38555493989255
    precision: 98.94736842105263
    recall: 80.49281314168377
- - cot: 'The error is due to the rounding_mode argument being set to "zIvK", which
      is not a valid value. The rounding_mode argument should be one of None, ''trunc'',
      or ''floor''. Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        rounding_mode: str
        self: tensor
      msg: div expected rounding_mode to be one of None, 'trunc', or 'floor' but found
        'uJyZ'
      package: torch
    txt: rounding_mode in [None, 'trunc', 'floor']
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        rounding_mode: Optional[str]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape) and
      all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        other: Tensor
        out: Tensor
        rounding_mode: Optional[str]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
