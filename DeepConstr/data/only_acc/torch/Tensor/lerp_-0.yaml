args:
  dtype:
  - Tensor
  - Tensor
  - number
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - end
  - weight
  required:
  - true
  - true
  - true
name: torch.Tensor.lerp_
package: torch
pass_rate: 22.0
rules:
- - cot: "Based on the given runtime information, the error is triggered because the\
      \ size of tensor `a` (self) (3) does not match the size of tensor `b` (end)\
      \ (2) at non-singleton dimension 6. \n\nTo prevent this error, we can formulate\
      \ the following constraint:"
    length: 1
    target:
      choosen_dtype:
        end: tensor
        self: tensor
        weight: int
      msg: The size of tensor a (3) must match the size of tensor b (2) at non-singleton
        dimension 6
      package: torch
    txt: self.dim == end.dim and self.shape == end.shape
  - f1_score: 81.00810081008102
    overall_score: 100
    precision: 100.0
    recall: 68.07866868381241
- - cot: default
    length: 2
    target:
      choosen_dtype:
        end: Tensor
        self: Tensor
        weight: number
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in end.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        end: Tensor
        self: Tensor
        weight: number
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and end.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        end: Tensor
        self: Tensor
        weight: number
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in end.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        end: Tensor
        self: Tensor
        weight: number
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and end.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
