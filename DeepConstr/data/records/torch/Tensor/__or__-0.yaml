args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.__or__
package: torch
pass_rate: 44.4
rules:
- - cot: 'Based on the given runtime information, to prevent the error, the constraint
      can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (7) must match the size of tensor b (4) at non-singleton
        dimension 0
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 95.60229445506693
    overall_score: 59.80114722753346
    precision: 100.0
    recall: 91.57509157509158
- - cot: synthesized
    length: 6
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: uint32
      package: torch
    txt: ((((dtype(other) in ["half", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]) or (dtype(other) == dtype(self))) and (self.dim() == other.dim()))
      and ((dtype(self) in ["half", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"]) or (dtype(other) == dtype(self)))) or (dtype(self) == "uint32"
      and dtype(other) == "int8")
  - f1_score: 96.60523763336566
    overall_score: 50.70261881668283
    precision: 99.6
    recall: 93.78531073446327
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_or_cpu" not implemented for ''Float'''
      package: torch
    txt: ((dtype(other) in ["int8", "int16", "int32", "int64", "uint8", "uint16",
      "uint32", "uint64"])) or ((dtype(self) != Float) and (dtype(other) != Float))
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
