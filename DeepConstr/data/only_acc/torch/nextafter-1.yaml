args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.nextafter
package: torch
pass_rate: 100
rules:
- - cot: "The error is triggered because the size of tensor `self` (3) does not match\
      \ the size of tensor `other` (9) at non-singleton dimension 1. \n\nTo prevent\
      \ this error, we need to ensure that the sizes of `self` and `other` match at\
      \ non-singleton dimension 1. \n\nThe constraint can be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (3) must match the size of tensor b (9) at non-singleton
        dimension 4
      package: torch
    txt: self.shape[1] == other.shape[1]
  - f1_score: 76.72634271099744
    overall_score: 100
    precision: 100.0
    recall: 62.24066390041494
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(self) == dtype(other) == dtype(out)
  - f1_score: 68.72852233676976
    overall_score: 100
    precision: 100.0
    recall: 52.35602094240838
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"nextafter_cpu" not implemented for ''Bool'''
      package: torch
    txt: out.dtype != torch.bool
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '''complex32'''
      package: torch
    txt: (self.dim == other.dim) and (all(self.dim() > other.dim() and self.shape[self.dim()]
      == 1 for i in range(len(self))))
  - f1_score: 68.72852233676976
    overall_score: 100
    precision: 100.0
    recall: 52.35602094240838
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
