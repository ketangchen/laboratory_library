args:
  dtype:
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.equal
package: tensorflow
pass_rate: 95.33333333333334
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__Equal_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [4,7,6,7,6,1,1] vs. [5,0,4,5,0,6,6] [Op:Equal] name:
        tfgW'
      package: tensorflow
    txt: (all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or y.shape[i] == 1 for i
      in range(-1, -min(len(x.shape), len(y.shape))-1, -1))) and (x.shape == y.shape)
  - f1_score: 88.54745779844336
    overall_score: 50.49328859060403
    precision: 97.98657718120806
    recall: 80.76710307947631
- - cot: 'Based on the given information, the error occurs because the input tensor
      at index 1 is expected to be a float tensor, but it is actually an int32 tensor.
      To prevent this error, we need to ensure that the data type of the input tensors
      match. The constraint can be formulated as follows:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute Equal as input #1(zero-based) was expected to be a int32
        tensor but is a float tensor [Op:Equal] name: smZt'
      package: tensorflow
    txt: dtype(x) == dtype(y)
  - f1_score: 97.08737864077668
    overall_score: 100
    precision: 100.0
    recall: 94.33962264150942
- - cot: 'The error is caused because negative dimensions are not allowed. To prevent
      this error, we need to ensure that the dimensions of the tensors are not negative.
      We can formulate the constraint as follows:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(x.shape[i] >= 0 for i in range(x.rank)) and all(y.shape[i] >= 0 for i
      in range(y.rank))
  - f1_score: 68.02721088435375
    overall_score: 100
    precision: 100.0
    recall: 51.54639175257733
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__Equal_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Broadcast between [6,6,6,1,7,7] and [6,6,6,1,7,7,1] is not supported yet.
        [Op:Equal] name: aHQI'
      package: tensorflow
    txt: 1 in y.shape
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
