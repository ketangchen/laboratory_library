args:
  dtype:
  - Tensor
  - int
  - int
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - dim0
  - dim1
  required:
  - true
  - true
  - true
name: torch.Tensor.swapdims_
package: torch
pass_rate: 79.0
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim0: int
        dim1: int
        self: tensor
      msg: Dimension out of range (expected to be in range of [-7, 6], but got 8)
      package: torch
    txt: dim0 >= -len(self.shape) and dim0 < len(self.shape) and dim1 >= -len(self.shape)
      and dim1 < len(self.shape)
  - f1_score: 65.78947368421052
    overall_score: 44.89473684210526
    precision: 75.0
    recall: 58.59375
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim0: int
        dim1: int
        self: tensor
      msg: Dimension out of range (expected to be in range of [-7, 6], but got 9)
      package: torch
    txt: dim0 >= -len(self.shape) + 1
  - f1_score: 64.00996264009963
    overall_score: 44.004981320049815
    precision: 85.66666666666667
    recall: 51.0934393638171
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim0: int
        dim1: int
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim0: int
        dim1: int
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
