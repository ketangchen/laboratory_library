args:
  dtype:
  - Tensor
  - List[int]
  - int
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - dim
  - edge_order
  required:
  - true
  - true
  - false
name: torch.gradient
package: torch
pass_rate: 68.33333333333333
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: list[int]
        edge_order: int
        self: tensor
      msg: torch.gradient only supports edge_order=1 and edge_order=2.
      package: torch
    txt: edge_order == 2
  - f1_score: 98.03921568627452
    overall_score: 100
    precision: 100.0
    recall: 96.15384615384615
- - cot: "Based on the given runtime information, the error occurs because the value\
      \ of the `dim` parameter is out of range. The expected range for the `dim` parameter\
      \ is [-2, 1], but the given value is 36.\n\nTo prevent this error, we need to\
      \ ensure that the value of the `dim` parameter is within the valid range for\
      \ the given tensor. If we denote the shape of the tensor as `n`, the valid range\
      \ for the dimension would be `[-n, n-1]`. \n\nThe constraint for the `dim` parameter\
      \ can be expressed as:"
    length: 1
    target:
      choosen_dtype:
        dim: list[int]
        edge_order: int
        self: tensor
      msg: Dimension out of range (expected to be in range of [-2, 1], but got 36)
      package: torch
    txt: all(d >= -len(self.shape) and d < len(self.shape) for d in dim)
  - f1_score: 69.14285714285714
    overall_score: 43.33333333333333
    precision: 80.66666666666666
    recall: 60.5
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        edge_order: int
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        edge_order: int
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        edge_order: int
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: List[int]
        edge_order: int
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
