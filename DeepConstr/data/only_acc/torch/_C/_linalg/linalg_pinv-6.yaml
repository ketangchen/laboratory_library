args:
  dtype:
  - Tensor
  - Tensor
  - bool
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - rcond
  - hermitian
  required:
  - true
  - true
  - false
name: torch._C._linalg.linalg_pinv
package: torch
pass_rate: 49.666666666666664
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        hermitian: bool
        rcond: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (7) at non-singleton
        dimension 6
      package: torch
    txt: (self.dim == rcond.dim) and (rcond.shape[4] == self.shape[4])
  - f1_score: 77.22007722007723
    overall_score: 100
    precision: 100.0
    recall: 62.8930817610063
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        hermitian: bool
        rcond: tensor
        self: tensor
      msg: 'linalg.pinv(Float{[]}): expected a tensor with 2 or more dimensions of
        float, double, cfloat or cdouble types'
      package: torch
    txt: (len(self.shape) >= 2 and self.dtype in ["float", "double", "cfloat", "cdouble"])
      and (self.dtype in ["float32", "float64", "complex64", "complex128"])
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Based on the given runtime information, the error occurs because the input\
      \ matrix `self` has dimensions 5 by 3, while `linalg_pinv` expects batches of\
      \ square matrices. \n\nTo prevent the error, the input matrix `self` should\
      \ have dimensions of `n` by `n`, where `n` is the same for all matrices in the\
      \ batch.\n\nThe constraint to prevent the error is:"
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        rcond: tensor
        self: tensor
      msg: 'linalg.eigh: A must be batches of square matrices, but they are 6 by 8
        matrices'
      package: torch
    txt: self.shape[-2] == self.shape[-1]
  - f1_score: 69.71153846153847
    overall_score: 51.333333333333336
    precision: 96.66666666666667
    recall: 54.51127819548872
- - cot: default
    length: 2
    target:
      choosen_dtype:
        hermitian: bool
        rcond: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in rcond.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        hermitian: bool
        rcond: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and rcond.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
