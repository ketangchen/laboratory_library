args:
  dtype:
  - Tensor
  - List[int]
  is_pos:
  - true
  - false
  name:
  - self
  - size
  required:
  - true
  - true
name: torch.Tensor.broadcast_to
package: torch
pass_rate: 100
rules:
- - cot: Error is triggered because of negative and zero values in the size list.
      It is not possible to have a tensor of negative or zero size. Let's see what
      the args were. The size list contains negative and zero values. Therefore, all
      elements in the size list should be positive.
    length: 1
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'numel: integer multiplication overflow'
      package: torch
    txt: all(i > 0 for i in size)
  - f1_score: 95.69377990430624
    overall_score: 59.84688995215312
    precision: 100.0
    recall: 91.74311926605505
- - cot: 'Based on given values, error is triggered because the number of sizes provided
      is less than the number of dimensions in the tensor. It expects the number of
      sizes provided to be greater than or equal to the number of dimensions in the
      tensor. So, the condition that will prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
        size: list[int]
      msg: 'expand(torch.FloatTensor{[8, 4, 9, 4, 4, 4, 4, 4, 4]}, size=[]): the number
        of sizes provided (0) must be greater or equal to the number of dimensions
        in the tensor (9)'
      package: torch
    txt: len(size) >= self.dim
  - f1_score: 66.66666666666667
    overall_score: 45.333333333333336
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        size: List[int]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
        size: List[int]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
