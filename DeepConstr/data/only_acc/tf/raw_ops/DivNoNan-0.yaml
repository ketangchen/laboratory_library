args:
  dtype:
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.raw_ops.DivNoNan
package: tensorflow
pass_rate: 97.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__DivNoNan_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [3,9,3,8,3,3] vs. [5,7,7,7,7,7,7] [Op:DivNoNan] name:
        tqIE'
      package: tensorflow
    txt: (len(x) == len(y)) and (all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or
      y.shape[i] == 1 for i in range(-1, -min(len(x.shape), len(y.shape))-1, -1)))
  - f1_score: 92.37875288683603
    overall_score: 100
    precision: 100.0
    recall: 85.83690987124464
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: "Value for attr 'T' of int32 is not in the list of allowed values: half,\
        \ float, bfloat16, double, complex64, complex128\n\t; NodeDef: {{node DivNoNan}};\
        \ Op<name=DivNoNan; signature=x:T, y:T -> z:T; attr=T:type,allowed=[DT_HALF,\
        \ DT_FLOAT, DT_BFLOAT16, DT_DOUBLE, DT_COMPLEX64, DT_COMPLEX128]> [Op:DivNoNan]\
        \ name: Vsbi"
      package: tensorflow
    txt: dtype(x) in ["half", "float", "bfloat16", "double", "complex64", "complex128"]
  - f1_score: 99.25558312655089
    overall_score: 100
    precision: 100.0
    recall: 98.52216748768474
- - cot: 'Based on the given runtime information, the error is triggered because the
      function `tf.raw_ops.DivNoNan` is expecting a float tensor as the second input,
      but an int32 tensor is provided instead. To prevent this error, we need to ensure
      that the data type of the second input tensor (`y`) is float, which should be
      the same as the data type of the first input tensor (`x`).


      Therefore, the constraint to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute DivNoNan as input #1(zero-based) was expected to be a float
        tensor but is a int32 tensor [Op:DivNoNan] name: TAsO'
      package: tensorflow
    txt: dtype(y) == dtype(x)
  - f1_score: 99.50248756218905
    overall_score: 100
    precision: 100.0
    recall: 99.00990099009901
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: y.shape[i] >= 0
  - f1_score: 66.77796327212019
    overall_score: 100
    precision: 100.0
    recall: 50.125313283208015
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
