args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - exponent
  required:
  - true
  - true
name: torch.Tensor.float_power_
package: torch
pass_rate: 100
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        exponent: tensor
        self: tensor
      msg: 'Too large tensor shape: shape = [9, 9, 9, 9, 9, 9, 9, 9, 9]'
      package: torch
    txt: (exponent.shape == self.shape) and (len(self.shape) < 9)
  - f1_score: 82.44023083264634
    overall_score: 47.22011541632317
    precision: 100.0
    recall: 70.12622720897616
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        exponent: tensor
        self: tensor
      msg: the base given to float_power_ has dtype Float but the operation's result
        requires dtype Double
      package: torch
    txt: dtype(self) == dtype(exponent) == Double
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        exponent: tensor
        self: tensor
      msg: output with shape [] doesn't match the broadcast shape [4, 8, 8, 9, 8]
      package: torch
    txt: exponent.ndim == 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        exponent: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in exponent.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        exponent: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and exponent.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
