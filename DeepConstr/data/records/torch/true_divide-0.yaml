args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.true_divide
package: torch
pass_rate: 100
rules:
- - cot: "The error is triggered because the size of tensor a (7) does not match the\
      \ size of tensor b (3) at non-singleton dimension 5. To prevent this error,\
      \ we need to ensure that the dimensions and shapes of both tensors are consistent.\
      \ \n\nLet's denote the two tensors as `self` and `other`. The constraint can\
      \ be formulated as follows:"
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (7) must match the size of tensor b (9) at non-singleton
        dimension 6
      package: torch
    txt: self.dim() == other.dim() and self.shape() == other.shape()
  - f1_score: 94.56264775413712
    overall_score: 59.28132387706856
    precision: 100.0
    recall: 89.68609865470853
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
