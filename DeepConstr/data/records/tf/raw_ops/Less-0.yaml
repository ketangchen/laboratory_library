args:
  dtype:
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  name:
  - name
  - x
  - y
  required:
  - false
  - true
  - true
name: tf.raw_ops.Less
package: tensorflow
pass_rate: 98.66666666666667
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: '{{function_node __wrapped__Less_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Incompatible shapes: [5,5,5,5,5,5,5] vs. [3,6,9,9,8,9,9] [Op:Less] name: cfAt'
      package: tensorflow
    txt: (all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or y.shape[i] == 1 for i
      in range(-1, -min(len(x.shape), len(y.shape))-1, -1))) and (all(x.shape[i] ==
      y.shape[i] for i in range(x.rank)))
  - f1_score: 92.87925696594425
    overall_score: 100
    precision: 100.0
    recall: 86.70520231213872
- - cot: "Based on the given runtime information, the error arises because the function\
      \ is trying to perform the Less operation on a float tensor and an int32 tensor.\
      \ However, both tensors in the arguments must have the same data type. \n\n\
      To prevent the error, the data type of the int32 tensor should be converted\
      \ to a float tensor. Therefore, the constraint that will prevent the error is:"
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: 'cannot compute Less as input #1(zero-based) was expected to be a float
        tensor but is a int32 tensor [Op:Less] name: QQIw'
      package: tensorflow
    txt: dtype(y) == dtype(x)
  - f1_score: 99.66777408637873
    overall_score: 61.833887043189364
    precision: 100.0
    recall: 99.33774834437087
- - cot: 'The error is caused because the dimensions of the y tensor contain negative
      values, which is not allowed. To prevent this error, all dimensions of y should
      be non-negative. The constraint can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        name: str
        x: tensor
        y: tensor
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(dim >= 0 for dim in y.shape)
  - f1_score: 71.94244604316549
    overall_score: 47.971223021582745
    precision: 100.0
    recall: 56.17977528089888
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in x.shape) and all(i >= 0 for i in y.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        name: str
        x: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        y: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
      msg: Too large tensor shape
      package: tensorflow
    txt: x.rank <= 7 and y.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
