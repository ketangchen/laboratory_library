args:
  dtype:
  - Tensor
  - float
  - bool
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - tol
  - hermitian
  required:
  - true
  - true
  - false
name: torch._C._linalg.linalg_matrix_rank
package: torch
pass_rate: 49.4
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        self: tensor
        tol: float
      msg: '"linalg_eigh_cpu" not implemented for ''Int'''
      package: torch
    txt: dtype(self) == float
  - f1_score: 79.05138339920948
    overall_score: 100
    precision: 100.0
    recall: 65.359477124183
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        self: tensor
        tol: float
      msg: 'linalg.svd: Expected a floating point or complex tensor as input. Got
        Int'
      package: torch
    txt: dtype(self) == torch.float64
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        self: tensor
        tol: float
      msg: 'torch.linalg.matrix_rank: The input tensor input must have at least 2
        dimensions.'
      package: torch
    txt: self.dim >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        self: Tensor
        tol: float
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        hermitian: bool
        self: Tensor
        tol: float
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
