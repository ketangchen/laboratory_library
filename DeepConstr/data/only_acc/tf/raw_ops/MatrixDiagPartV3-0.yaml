args:
  dtype:
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  is_pos:
  - false
  - false
  - false
  - false
  - false
  name:
  - align
  - input
  - k
  - name
  - padding_value
  required:
  - false
  - true
  - true
  - false
  - false
name: tf.raw_ops.MatrixDiagPartV3
package: tensorflow
pass_rate: 0.0
rules:
- - cot: 'The error is due to an invalid value for the ''align'' attribute. The provided
      value is "NwEk", which is not in the allowed values: "LEFT_RIGHT", "RIGHT_LEFT",
      "LEFT_LEFT", "RIGHT_RIGHT". Therefore, the value for ''align'' should be corrected
      to be one of the allowed values. Op : in, and Right : ["LEFT_RIGHT", "RIGHT_LEFT",
      "LEFT_LEFT", "RIGHT_RIGHT"].'
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: "Value for attr 'align' of \"ZlEF\" is not in the list of allowed values:\
        \ \"LEFT_RIGHT\", \"RIGHT_LEFT\", \"LEFT_LEFT\", \"RIGHT_RIGHT\"\n\t; NodeDef:\
        \ {{node MatrixDiagPartV3}}; Op<name=MatrixDiagPartV3; signature=input:T,\
        \ k:int32, padding_value:T -> diagonal:T; attr=T:type; attr=align:string,default=\"\
        RIGHT_LEFT\",allowed=[\"LEFT_RIGHT\", \"RIGHT_LEFT\", \"LEFT_LEFT\", \"RIGHT_RIGHT\"\
        ]> [Op:MatrixDiagPartV3] name: tJXl"
      package: tensorflow
    txt: align in ["LEFT_RIGHT", "RIGHT_LEFT", "LEFT_LEFT", "RIGHT_RIGHT"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: The error arises because the 'k' tensor is expected to be an int32 tensor,
      but it is provided as a float tensor. Therefore, the data type of 'k' tensor
      should be corrected. The constraint to prevent the error would be to ensure
      that the data type of 'k' tensor is int32.
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: 'cannot compute MatrixDiagPartV3 as input #1(zero-based) was expected to
        be a int32 tensor but is a float tensor [Op:MatrixDiagPartV3] name: KiCK'
      package: tensorflow
    txt: dtype(k) == int32
  - f1_score: 97.95918367346938
    overall_score: 51.0
    precision: 96.0
    recall: 100.0
- - cot: 'The error is triggered because the shape of `k` is not a scalar or vector.
      Let''s see what the arguments were. `k` is a tensor of int32 with shape [7,
      1, 2, 4, 1, 1]. To prevent the error, the shape of `k` should be a scalar or
      vector. Therefore, the constraint should be:'
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: '{{function_node __wrapped__MatrixDiagPartV3_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        diag_index must be a scalar or vector, received shape: [1,7,8,2,7,7,7] [Op:MatrixDiagPartV3]
        name: TKlM'
      package: tensorflow
    txt: k.shape.rank <= 1
  - f1_score: 98.19967266775778
    overall_score: 100
    precision: 100.0
    recall: 96.46302250803859
- - cot: 'The error is triggered because the padding value is not scalar. The given
      runtime information shows that the padding value tensor has a shape of [2, 9,
      9, 9, 9, 9, 9]. To prevent the error, the padding value tensor should be a scalar.
      Therefore, the constraint is:'
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: '{{function_node __wrapped__MatrixDiagPartV3_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Padding must be scalar. [Op:MatrixDiagPartV3] name: mGcy'
      package: tensorflow
    txt: padding_value.dim == 0
  - f1_score: 99.17355371900828
    overall_score: 100
    precision: 100.0
    recall: 98.36065573770493
- - cot: 'The error is triggered because the input tensor must be at least 2-dimensional,
      but the received shape is empty. Therefore, the constraint to prevent this error
      is:'
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: '{{function_node __wrapped__MatrixDiagPartV3_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        input must be at least 2-dim, received shape: [] [Op:MatrixDiagPartV3] name:
        WPWw'
      package: tensorflow
    txt: input.rank >= 2
  - f1_score: 97.81818181818183
    overall_score: 100
    precision: 100.0
    recall: 95.72953736654804
- - cot: 'The error occurs because the value of `lower_diag_index` is out of the valid
      range. Let''s see what the arguments were. It is related to the argument `k`,
      which is an empty tensor. Since `k` is empty, it means that there are no diagonals
      to extract from the input tensor. Therefore, any value for `lower_diag_index`
      will be out of bounds.


      To prevent this error in the future, we need to ensure that the `k` tensor is
      not empty before calling the `MatrixDiagPartV3` function. We can do this by
      adding a constraint that checks if the length of `k` is greater than zero.


      The constraint for the `k` parameter can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: '{{function_node __wrapped__MatrixDiagPartV3_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        lower_diag_index is out of bound: -234222. It must be between -8 and 9 [Op:MatrixDiagPartV3]
        name: oaZX'
      package: tensorflow
    txt: len(k) > 0
  - f1_score: 87.07646176911544
    overall_score: 45.93680297397769
    precision: 85.87360594795538
    recall: 88.31349378747068
- - cot: 'The error is caused because the diag_index tensor is empty. The function
      expects the diag_index tensor to have at least 1 element. Here, the ''input''
      tensor which is serving as the diag_index tensor has 0 elements in its second
      dimension. Therefore, Left : input.shape[1], the number of elements in the second
      dimension of the input tensor, should be corrected. It should be greater than
      0, so Op : ''>'', and Right : 0.'
    length: 1
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: '{{function_node __wrapped__MatrixDiagPartV3_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Expected diag_index to have at least 1 element [Op:MatrixDiagPartV3] name:
        Qsfw'
      package: tensorflow
    txt: input.shape[1] > 0
  - f1_score: 67.59629987574209
    overall_score: 52.63503649635037
    precision: 99.27007299270073
    recall: 51.245551601423486
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        align: str
        input: tensor
        k: tensor
        name: str
        padding_value: tensor
      msg: '{{function_node __wrapped__MatrixDiagPartV3_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        diag_index must have only one or two elements, received 8 elements. [Op:MatrixDiagPartV3]
        name: VwvC'
      package: tensorflow
    txt: (len(k) == 1 or len(k) == 2) and (k.shape[0] in [1, 2])
  - f1_score: 95.97197898423819
    overall_score: 100
    precision: 100.0
    recall: 92.25589225589226
