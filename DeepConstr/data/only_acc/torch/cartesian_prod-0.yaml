args:
  dtype:
  - List[Tensor]
  is_pos:
  - tensors
  name:
  - tensors
  required:
  - true
name: torch.cartesian_prod
package: torch
pass_rate: 100
rules:
- - cot: The error is triggered because the function `torch.cartesian_prod` expects
      a non-empty list of tensors as input. To prevent this error, we can add a constraint
      to ensure that the input list of tensors is not empty.
    length: 1
    target:
      choosen_dtype:
        tensors: list[tensor]
      msg: meshgrid expects a non-empty TensorList
      package: torch
    txt: len(tensors) > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        tensors: list[tensor]
      msg: Expect a 1D vector, but got shape [0, 0]
      package: torch
    txt: len(tensors) == 1 and len(tensors[0].shape) == 1
  - f1_score: 94.56264775413712
    overall_score: 100
    precision: 100.0
    recall: 89.68609865470853
- - cot: default
    length: 0
    target:
      choosen_dtype:
        tensors: List[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 0
    target:
      choosen_dtype:
        tensors: List[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
