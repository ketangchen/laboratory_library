args:
  dtype:
  - Tensor
  - int
  - bool
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - dim
  - keepdim
  required:
  - true
  - true
  - false
name: torch.max
package: torch
pass_rate: 86.0
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: tensor
      msg: Dimension out of range (expected to be in range of [-1, 0], but got -3)
      package: torch
    txt: dim >= -len(self.shape)
  - f1_score: 80.96280087527353
    overall_score: 49.25
    precision: 92.5
    recall: 71.98443579766537
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: tensor
      msg: Dimension out of range (expected to be in range of [-7, 6], but got 9)
      package: torch
    txt: (dim >= -len(self.shape) and dim < len(self.shape)) or (8 >= -len(self.shape)
      and 8 < len(self.shape))
  - f1_score: 83.90022675736961
    overall_score: 47.75
    precision: 92.5
    recall: 76.76348547717842
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        keepdim: bool
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
