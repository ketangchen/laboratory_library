args:
  dtype:
  - List[Tensor]
  - int
  is_pos:
  - true
  - false
  name:
  - tensors
  - dim
  required:
  - true
  - false
name: torch.stack
package: torch
pass_rate: 0.0
rules:
- - cot: 'The constraint that prevents the error is:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        tensors: list[tensor]
      msg: stack expects a non-empty TensorList
      package: torch
    txt: len(tensors) != 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Error is triggered because the tensors in the list have different sizes\
      \ at the specified dimension (dim). The first tensor has a size of [4, 6, 2,\
      \ 2, 1, 3, 1] at entry 0, while the third tensor has a size of [6, 7, 1, 2,\
      \ 7, 7, 7] at entry 2. To prevent this error, we need to ensure that all tensors\
      \ in the list have the same size at the specified dimension. \n\nTherefore,\
      \ the constraint that prevents the error is:"
    length: 1
    target:
      choosen_dtype:
        dim: int
        tensors: list[tensor]
      msg: stack expects each tensor to be equal size, but got [4, 6, 2, 2, 1, 3,
        1] at entry 0 and [6, 7, 1, 2, 7, 7, 7] at entry 2
      package: torch
    txt: all(tensors[i].shape[dim] == tensors[0].shape[dim] for i in range(1, len(tensors)))
  - f1_score: 74.07407407407409
    overall_score: 100
    precision: 100.0
    recall: 58.82352941176471
- - cot: default
    length: 0
    target:
      choosen_dtype:
        dim: int
        tensors: List[Tensor]
      msg: negative dimensions are not allowed
      package: torch
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 0
    target:
      choosen_dtype:
        dim: int
        tensors: List[Tensor]
      msg: Too large tensor shape
      package: torch
    txt: ''
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
