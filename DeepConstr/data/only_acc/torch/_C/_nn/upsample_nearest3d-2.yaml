args:
  dtype:
  - Tensor
  - List[int]
  - Optional[float]
  - Optional[float]
  - Optional[float]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - output_size
  - scales_d
  - scales_h
  - scales_w
  - out
  required:
  - true
  - true
  - false
  - false
  - false
  - true
name: torch._C._nn.upsample_nearest3d
package: torch
pass_rate: 0.0
rules:
- - cot: synthesized
    length: 5
    target:
      choosen_dtype:
        out: tensor
        output_size: list[int]
        scales_d: None
        scales_h: None
        scales_w: float
        self: tensor
      msg: It is expected output_size equals to 3, but got size 0
      package: torch
    txt: ((((len(output_size) == 3) or (all(d >= -len(self.shape) and d < len(self.shape)
      for d in output_size))) or (len(output_size) == len(self.shape))) and (len(self.shape)
      == 5)) and (len(output_size) == 3)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        output_size: List[int]
        scales_d: Optional[float]
        scales_h: Optional[float]
        scales_w: Optional[float]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        output_size: List[int]
        scales_d: Optional[float]
        scales_h: Optional[float]
        scales_w: Optional[float]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        output_size: List[int]
        scales_d: Optional[float]
        scales_h: Optional[float]
        scales_w: Optional[float]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        output_size: List[int]
        scales_d: Optional[float]
        scales_h: Optional[float]
        scales_w: Optional[float]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
