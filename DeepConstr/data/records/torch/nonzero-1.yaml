args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - out
  required:
  - true
  - true
name: torch.nonzero
package: torch
pass_rate: 100
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 85.59139784946237
    overall_score: 54.795698924731184
    precision: 99.5
    recall: 75.09433962264151
- - cot: 'The error occurs because the data type of the ''out'' tensor is float, but
      the function expects it to be of type Long. To prevent this error, we need to
      ensure that the data type of the ''out'' tensor is Long. The constraint for
      the data types can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
      msg: 'nonzero: Expected out tensor to have scalar type Long but got scalar typeFloat'
      package: torch
    txt: dtype(out) == Long
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
