args:
  dtype:
  - Tensor
  - List[int]
  - bool
  - Optional[float]
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - output_size
  - align_corners
  - scales
  required:
  - true
  - true
  - true
  - false
name: torch._C._nn.upsample_linear1d
package: torch
pass_rate: 96.33507853403141
rules:
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales: float
        self: tensor
      msg: 'Input and output sizes should be greater than 0, but got input (W: 1)
        and output (W: -3)'
      package: torch
    txt: ((self.shape[2] > 0) and (self.size(3) > 0 and output_size[0] > 0)) and (self.shape[2]
      > 0)
  - f1_score: 77.97270955165692
    overall_score: 100
    precision: 100.0
    recall: 63.897763578274756
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        align_corners: bool
        output_size: list[int]
        scales: float
        self: tensor
      msg: Expected out tensor to have dtype float, but got int instead
      package: torch
    txt: (out.dtype == torch.float) and (dtype(out) == dtype(self))
  - f1_score: 83.1858407079646
    overall_score: 100
    precision: 100.0
    recall: 71.21212121212122
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: List[int]
        scales: Optional[float]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        align_corners: bool
        output_size: List[int]
        scales: Optional[float]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
