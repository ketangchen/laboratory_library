args:
  dtype:
  - Tensor
  - Optional[int]
  - int
  - Optional[str]
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - n
  - dim
  - norm
  required:
  - true
  - false
  - false
  - false
name: torch._C._fft.fft_irfft
package: torch
pass_rate: 60.66666666666667
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        self: tensor
      msg: Dimension out of range (expected to be in range of [-2, 1], but got -4)
      package: torch
    txt: dim >= -len(self.shape)
  - f1_score: 67.65799256505576
    overall_score: 48.5
    precision: 91.0
    recall: 53.846153846153854
- - cot: 'The error is due to an invalid number of data points being specified. The
      function torch._C._fft.fft_irfft is trying to perform an inverse real discrete
      Fourier transform on a tensor with a size of 0 along the dimension specified,
      which is not possible. It''s necessary to ensure that the tensor''s size along
      the given dimension is greater than 0. If we denote the dimension as dim and
      the tensor as self, the constraint can be expressed as:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        self: tensor
      msg: Invalid number of data points (0) specified
      package: torch
    txt: self.size(dim) > 0
  - f1_score: 58.10397553516819
    overall_score: 34.666666666666664
    precision: 63.33333333333333
    recall: 53.672316384180796
- - cot: 'Based on the given runtime information, the error occurs because the specified
      dimension (64) is not present in the tensor. Therefore, the constraint to prevent
      the error is:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        self: tensor
      msg: Dimension specified as 78 but tensor has no dimensions
      package: torch
    txt: dim < len(self)
  - f1_score: 95.84664536741214
    overall_score: 100
    precision: 100.0
    recall: 92.02453987730061
- - cot: The error is caused by an invalid normalization mode. The value provided
      for 'norm' is "CiVX", which is not a valid mode. The valid modes for normalization
      are "ortho" and "forward". Therefore, the value for 'norm' should be corrected
      to either "ortho" or "forward".
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        self: tensor
      msg: 'Invalid normalization mode: "CiVX"'
      package: torch
    txt: norm in ["ortho", "forward"]
  - f1_score: 85.1063829787234
    overall_score: 100
    precision: 100.0
    recall: 74.07407407407408
- - cot: 'The error is due to an invalid normalization mode. The function is trying
      to use the normalization mode "GvcE", which is not a valid option. The valid
      normalization modes are "backward" and "ortho". Therefore, the constraint to
      prevent the error is:


      `norm in ["backward", "ortho"]`


      Wrap the final formula with'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        self: tensor
      msg: 'Invalid normalization mode: "GvcE"'
      package: torch
    txt: (norm in ["backward", "ortho"])
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
