args:
  dtype:
  - float
  - float
  - float
  - int
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - str
  is_pos:
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - alpha
  - beta
  - bias
  - depth_radius
  - input
  - name
  required:
  - false
  - false
  - false
  - false
  - true
  - false
name: tf.raw_ops.LRN
package: tensorflow
pass_rate: 95.33333333333334
rules:
- - cot: 'The error occurs because the input tensor is not 4-dimensional. To prevent
      this error, the input tensor must have 4 dimensions. Therefore, the constraint
      is:'
    length: 1
    target:
      choosen_dtype:
        alpha: float
        beta: float
        bias: float
        depth_radius: int
        input: tensor
        name: str
      msg: '{{function_node __wrapped__LRN_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        in must be 4-dimensional [Op:LRN] name: cmoW'
      package: tensorflow
    txt: input.dim == 4
  - f1_score: 89.28571428571429
    overall_score: 100
    precision: 100.0
    recall: 80.64516129032259
- - cot: 'The error is due to the depth_radius being negative. In the tf.raw_ops.LRN
      function, depth_radius must be a non-negative integer. In this case, depth_radius
      was -3. Therefore, the Left : depth_radius should be corrected. It should be
      greater than or equal to 0, so Op : ''>='', Right : 0.'
    length: 1
    target:
      choosen_dtype:
        alpha: float
        beta: float
        bias: float
        depth_radius: int
        input: tensor
        name: str
      msg: '{{function_node __wrapped__LRN_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        depth_radius = -3 larger than int max [Op:LRN] name: ABCV'
      package: tensorflow
    txt: depth_radius >= 0
  - f1_score: 98.36065573770492
    overall_score: 100
    precision: 100.0
    recall: 96.77419354838709
- - cot: 'The error is caused by the LRN operation not being able to find a device
      for execution. It seems that the input tensor has a data type of bf16. To prevent
      this error, the input tensor should have a supported data type for the LRN operation.
      The supported data types for the LRN operation are float16, float32, and float64.
      Therefore, the constraint to prevent this error is:'
    length: 1
    target:
      choosen_dtype:
        alpha: float
        beta: float
        bias: float
        depth_radius: int
        input: tensor
        name: str
      msg: "Could not find device for node: {{node LRN}} = LRN[T=DT_BFLOAT16, alpha=5,\
        \ beta=6, bias=9, depth_radius=0]\nAll kernels registered for op LRN:\n  device='XLA_CPU_JIT';\
        \ T in [DT_FLOAT, DT_BFLOAT16, DT_HALF]\n  device='XLA_GPU_JIT'; T in [DT_FLOAT,\
        \ DT_BFLOAT16, DT_HALF]\n  device='GPU'; T in [DT_FLOAT]\n  device='CPU';\
        \ T in [DT_HALF]\n  device='CPU'; T in [DT_FLOAT]\n [Op:LRN] name: UQaZ"
      package: tensorflow
    txt: input.dtype in [tf.float16, tf.float32, tf.float64]
  - f1_score: 94.63722397476342
    overall_score: 59.31861198738171
    precision: 100.0
    recall: 89.82035928143713
- - cot: default
    length: 1
    target:
      choosen_dtype:
        alpha: float
        beta: float
        bias: float
        depth_radius: int
        input: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        name: str
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in input.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        alpha: float
        beta: float
        bias: float
        depth_radius: int
        input: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        name: str
      msg: Too large tensor shape
      package: tensorflow
    txt: input.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
