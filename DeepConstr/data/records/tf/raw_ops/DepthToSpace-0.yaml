args:
  dtype:
  - int
  - str
  - float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
  - str
  is_pos:
  - false
  - false
  - false
  - false
  name:
  - block_size
  - data_format
  - input
  - name
  required:
  - true
  - false
  - true
  - false
name: tf.raw_ops.DepthToSpace
package: tensorflow
pass_rate: 100
rules:
- - cot: 'The error tells us that the depth dimension of the input tensor, which is
      9, should be divisible by 4. Here, the ''block_size'' is 2 and it''s squared
      (2*2) equals to 4. Therefore, Left : input.shape[-1], which is the depth dimension
      of the input tensor, should be corrected. It says that should be divisible by
      the ''block_size'' squared, so Op : %, and Right : block_size * block_size.'
    length: 1
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: tensor
        name: str
      msg: '{{function_node __wrapped__DepthToSpace_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Input depth dimension 7 should be divisible by: 4 [Op:DepthToSpace] name:
        NkLT'
      package: tensorflow
    txt: input.shape[-1] % (block_size * block_size) == 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "The error is triggered because the input tensor rank is 3 instead of 4.\
      \ The DepthToSpace operation requires the input tensor to have a rank of 4.\
      \ \n\nTherefore, the constraint to prevent the error is:"
    length: 1
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: tensor
        name: str
      msg: '{{function_node __wrapped__DepthToSpace_device_/job:localhost/replica:0/task:0/device:CPU:0}}
        Input rank should be: 4 instead of: 3 [Op:DepthToSpace] name: gcev'
      package: tensorflow
    txt: input.rank == 4
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "The error message indicates that the DepthToSpace operation could not find\
      \ a suitable device to run on. To prevent this error, we need to ensure that\
      \ the data type (T) and data format (data_format) provided are compatible with\
      \ the available devices. \n\nThe constraint for the 'T' parameter can be expressed\
      \ as:"
    length: 1
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: tensor
        name: str
      msg: "Could not find device for node: {{node DepthToSpace}} = DepthToSpace[T=DT_FLOAT,\
        \ block_size=2, data_format=\"NCHW_VECT_C\"]\nAll kernels registered for op\
        \ DepthToSpace:\n  device='XLA_CPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_INT32,\
        \ DT_UINT8, DT_INT16, 930109355527764061, DT_HALF, DT_UINT32, DT_UINT64, DT_FLOAT8_E5M2,\
        \ DT_FLOAT8_E4M3FN]\n  device='XLA_GPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_INT32,\
        \ DT_UINT8, DT_INT16, 930109355527764061, DT_HALF, DT_UINT32, DT_UINT64, DT_FLOAT8_E5M2,\
        \ DT_FLOAT8_E4M3FN]\n  device='CPU'; T in [DT_VARIANT]; data_format in [\"\
        NHWC\"]\n  device='CPU'; T in [DT_RESOURCE]; data_format in [\"NHWC\"]\n \
        \ device='CPU'; T in [DT_STRING]; data_format in [\"NHWC\"]\n  device='CPU';\
        \ T in [DT_BOOL]; data_format in [\"NHWC\"]\n  device='CPU'; T in [DT_COMPLEX128];\
        \ data_format in [\"NHWC\"]\n  device='CPU'; T in [DT_COMPLEX64]; data_format\
        \ in [\"NHWC\"]\n  device='CPU'; T in [DT_DOUBLE]; data_format in [\"NHWC\"\
        ]\n  device='CPU'; T in [DT_FLOAT]; data_format in [\"NHWC\"]\n  device='CPU';\
        \ T in [DT_BFLOAT16]; data_format in [\"NHWC\"]\n  device='CPU'; T in [DT_HALF];\
        \ data_format in [\"NHWC\"]\n  device='CPU'; T in [DT_INT32]; data_format\
        \ in [\"NHWC\"]\n  device='CPU'; T in [DT_INT8]; data_format in [\"NHWC\"\
        ]\n  device='CPU'; T in [DT_UINT8]; data_format in [\"NHWC\"]\n  device='CPU';\
        \ T in [DT_INT16]; data_format in [\"NHWC\"]\n  device='CPU'; T in [DT_UINT16];\
        \ data_format in [\"NHWC\"]\n  device='CPU'; T in [DT_UINT32]; data_format\
        \ in [\"NHWC\"]\n  device='CPU'; T in [DT_INT64]; data_format in [\"NHWC\"\
        ]\n  device='CPU'; T in [DT_UINT64]; data_format in [\"NHWC\"]\n  device='GPU';\
        \ T in [DT_QINT8]\n  device='GPU'; T in [DT_BFLOAT16]\n  device='GPU'; T in\
        \ [DT_HALF]\n  device='GPU'; T in [DT_FLOAT]\n [Op:DepthToSpace] name: IIit"
      package: tensorflow
    txt: data_format in ["NHWC"]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: tensor
        name: str
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: (block_size > 0) and (all(input.shape[i] > 0 for i in range(input.rank)))
  - f1_score: 75.18796992481204
    overall_score: 100
    precision: 100.0
    recall: 60.24096385542168
- - cot: 'Based on the given runtime information, the error occurs because the value
      provided for the ''block_size'' attribute is 1, which is less than the minimum
      value of 2. To prevent this error, the value of ''block_size'' should be corrected
      to be at least 2.


      The constraint that prevents the error is:'
    length: 1
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: tensor
        name: str
      msg: "Value for attr 'block_size' of 1 must be at least minimum 2\n\t; NodeDef:\
        \ {{node DepthToSpace}}; Op<name=DepthToSpace; signature=input:T -> output:T;\
        \ attr=T:type; attr=block_size:int,min=2; attr=data_format:string,default=\"\
        NHWC\",allowed=[\"NHWC\", \"NCHW\", \"NCHW_VECT_C\"]> [Op:DepthToSpace] name:\
        \ HVYc"
      package: tensorflow
    txt: block_size >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        name: str
      msg: negative dimensions are not allowed
      package: tensorflow
    txt: all(i >= 0 for i in input.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        block_size: int
        data_format: str
        input: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
        name: str
      msg: Too large tensor shape
      package: tensorflow
    txt: input.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
