args:
  dtype:
  - Tensor
  - List[int]
  - number
  - None
  - None
  - Optional[Device]
  - Optional[bool]
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - size
  - fill_value
  - dtype
  - layout
  - device
  - pin_memory
  required:
  - true
  - true
  - true
  - false
  - false
  - false
  - false
name: torch.Tensor.new_full
package: torch
pass_rate: 100
rules:
- - cot: 'Error is triggered because of not providing pin_memory allocator. Let''s
      see what the args were. If pin_memory is True, we should provide pin_memory
      allocator. Therefore, left : pin_memory op : == right : False'
    length: 1
    target:
      choosen_dtype:
        dtype: None
        fill_value: int
        layout: None
        pin_memory: bool
        self: tensor
        size: list[int]
      msg: Need to provide pin_memory allocator to use pin memory.
      package: torch
    txt: pin_memory == False
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        device: Optional[Device]
        dtype: None
        fill_value: number
        layout: None
        pin_memory: Optional[bool]
        self: Tensor
        size: List[int]
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        device: Optional[Device]
        dtype: None
        fill_value: number
        layout: None
        pin_memory: Optional[bool]
        self: Tensor
        size: List[int]
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
