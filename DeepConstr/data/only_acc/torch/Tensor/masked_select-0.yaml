args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - mask
  required:
  - true
  - true
name: torch.Tensor.masked_select
package: torch
pass_rate: 100
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        mask: tensor
        self: tensor
      msg: 'Too large tensor shape: shape = [8, 9, 9, 9, 9, 9, 9, 9, 9]'
      package: torch
    txt: self.shape == mask.shape
  - f1_score: 68.77579092159559
    overall_score: 46.38789546079779
    precision: 100.0
    recall: 52.41090146750524
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        mask: tensor
        self: tensor
      msg: 'masked_select: expected BoolTensor for mask'
      package: torch
    txt: mask.dtype == torch.bool
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        mask: tensor
        self: tensor
      msg: The size of tensor a (7) must match the size of tensor b (5) at non-singleton
        dimension 8
      package: torch
    txt: mask.dim == self.dim
  - f1_score: 91.40767824497257
    overall_score: 100
    precision: 100.0
    recall: 84.17508417508418
- - cot: default
    length: 2
    target:
      choosen_dtype:
        mask: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in mask.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        mask: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and mask.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
