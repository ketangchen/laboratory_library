args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.logaddexp
package: torch
pass_rate: 100
rules:
- - cot: 'Error is triggered because the size of tensor a (6) must match the size
      of tensor b (9) at non-singleton dimension 6. Let''s see what the args were.
      The two tensors have inconsistent dimensions and shapes. It expects to have
      the same dimension among all tensors. Therefore, the constraint can be formulated
      as follows:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (3) at non-singleton
        dimension 6
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 99.75062344139653
    overall_score: 100
    precision: 100.0
    recall: 99.50248756218907
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in other.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        other: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and other.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
