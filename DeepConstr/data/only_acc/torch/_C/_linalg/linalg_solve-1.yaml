args:
  dtype:
  - Tensor
  - Tensor
  - bool
  is_pos:
  - false
  - false
  - false
  name:
  - A
  - B
  - left
  required:
  - true
  - true
  - false
name: torch._C._linalg.linalg_solve
package: torch
pass_rate: 99.11504424778761
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: 'linalg.solve: Incompatible shapes of A and B for the equation XA = B (9x9
        and 8x8)'
      package: torch
    txt: (len(A) == len(B)) and (A.shape[-1] == B.shape[-2])
  - f1_score: 75.66204287515764
    overall_score: 100
    precision: 100.0
    recall: 60.85192697768763
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: 'linalg.solve: The input tensor B must have at least 2 dimensions.'
      package: torch
    txt: A.dim >= 2
  - f1_score: 87.0796460176991
    overall_score: 44.0
    precision: 82.0
    recall: 92.83018867924528
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: 'linalg.solve: A must be batches of square matrices, but they are 3 by
        5 matrices'
      package: torch
    txt: (A.shape[-1] == A.shape[-2]) and (rank(A) == 3)
  - f1_score: 87.46355685131195
    overall_score: 100
    precision: 100.0
    recall: 77.720207253886
- - cot: 'Based on the given runtime information, the constraint that would prevent
      the error is:'
    length: 1
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: 'linalg.solve: The input tensor B must have at least 2 dimensions.'
      package: torch
    txt: B.dim >= 2
  - f1_score: 96.45161290322581
    overall_score: 100
    precision: 100.0
    recall: 93.14641744548287
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: The size of tensor a (7) must match the size of tensor b (6) at non-singleton
        dimension 0
      package: torch
    txt: A.shape == B.shape
  - f1_score: 75.25773195876288
    overall_score: 100
    precision: 100.0
    recall: 60.33057851239669
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: 'linalg.solve: Expected a floating point or complex tensor as input. Got
        Int'
      package: torch
    txt: (dtype(out) == torch.float32) and (dtype(out) == dtype(A))
  - f1_score: 92.24652087475148
    overall_score: 100
    precision: 100.0
    recall: 85.60885608856088
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        A: tensor
        B: tensor
        left: bool
      msg: 'linalg.solve: Expected A and B to have the same dtype, but found A of
        type Float and B of type Int instead'
      package: torch
    txt: dtype(A) == dtype(B)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 2
    target:
      choosen_dtype:
        A: Tensor
        B: Tensor
        left: bool
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in A.shape) and all(i >= 0 for i in B.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        A: Tensor
        B: Tensor
        left: bool
      msg: Too large tensor shape
      package: torch
    txt: A.rank <= 7 and B.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
