args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - number
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - mat
  - vec
  - beta
  - alpha
  required:
  - true
  - true
  - true
  - false
  - false
name: torch.addmv
package: torch
pass_rate: 100
rules:
- - cot: 'The error message is saying that the ''vec'' tensor is of type int32, but
      the function expects it to be of type float32 to match the other tensors. Therefore,
      the data type of the ''vec'' tensor should be float32. So the constraint should
      be Left : vec.dtype, Op : ==, Right : mat.dtype'
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        self: tensor
        vec: tensor
      msg: expected scalar type Float but found Int
      package: torch
    txt: vec.dtype == mat.dtype
  - f1_score: 99.48717948717947
    overall_score: 61.74358974358974
    precision: 100.0
    recall: 98.9795918367347
- - cot: synthesized
    length: 3
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        self: tensor
        vec: tensor
      msg: size mismatch, got input (8), mat (9x5), vec (7)
      package: torch
    txt: ((mat.dim == 2) and (mat.shape[0] == self.shape[0])) and (mat.dim == 2 and
      vec.dim == 1 and mat.shape[1] == vec.shape[0])
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error message suggests that the function torch.addmv expects a 1-D tensor
      (vector) for ''self'' and ''vec'' parameters and a 2-D tensor (matrix) for ''mat''
      parameter. But it received a 2-D tensor for ''self'', a 4-D tensor for ''vec'',
      and a 3-D tensor for ''mat''. To avoid this error, we need to ensure that ''self''
      and ''vec'' parameters are 1-D tensors and ''mat'' parameter is a 2-D tensor.


      Therefore, the formulated conditions are:'
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 7, 7, 7
      package: torch
    txt: len(mat.shape) == 2 and len(self.shape) == 1 and len(vec.shape) == 1
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 3
    target:
      choosen_dtype:
        alpha: number
        beta: number
        mat: Tensor
        self: Tensor
        vec: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in mat.shape) and all(i
      >= 0 for i in vec.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 3
    target:
      choosen_dtype:
        alpha: number
        beta: number
        mat: Tensor
        self: Tensor
        vec: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and mat.rank <= 7 and vec.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
