args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - number
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  - false
  name:
  - self
  - mat
  - vec
  - beta
  - alpha
  - out
  required:
  - true
  - true
  - true
  - false
  - false
  - true
name: torch.addmv
package: torch
pass_rate: 2.030456852791878
rules:
- - cot: synthesized
    length: 5
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: size mismatch, got input (3), mat (7x7), vec (9)
      package: torch
    txt: ((mat.size()[1] == self.size()[0]) and (self.shape[0]==vec.shape[0])) or
      (((mat.shape[0] == vec.shape[0] and mat.shape[1] == self.shape[0] and out.shape[0]
      == mat.shape[0]) and (self.size(0) == mat.size(0))) and (mat.shape[1] == self.shape[0]))
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is triggered because a dimension is specified as 0, but the tensor
      has no dimensions. To prevent this error, the dimension specified should be
      greater than 0. Therefore, the constraint is:'
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: Dimension specified as 0 but tensor has no dimensions
      package: torch
    txt: self.ndim > 0
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is because the input matrices and vectors do not have the correct
      dimensions. The torch.addmv function expects the input mat to be a 2D matrix
      and vec to be a 1D vector, but they are not in the given case. The formula to
      prevent this error would ensure that the ''mat'' variable is a 2D matrix and
      ''vec'' is a 1D vector. Therefore, the condition to avoid this error would be:'
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 7, 2, 0
      package: torch
    txt: len(mat.shape) == 2 and len(vec.shape) == 1
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 0, 0, 1
      package: torch
    txt: (len(out.shape) == 1) and (self.shape[-2] == 9)
  - f1_score: 82.66155931911597
    overall_score: 53.33077965955798
    precision: 97.48743718592965
    recall: 71.7498505678422
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 7, 7, 0
      package: torch
    txt: mat.size(-1) == self.size(-2)
  - f1_score: 41.52046783625731
    overall_score: 20.75
    precision: 35.5
    recall: 50.0
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 7, 2, 0
      package: torch
    txt: (((out.shape[-1] == self.shape[0]) or ((self.shape[-2] == vec.shape[-1])))
      or (mat[-1] == out[-2])) or (mat.shape[1] == vec.shape[0])
  - f1_score: 45.53775743707093
    overall_score: 20.75
    precision: 40.0
    recall: 52.85524568393094
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 6, 0, 1
      package: torch
    txt: (mat.shape[-1] == self.shape[-2] and self.shape[-1] == vec.shape[0]) or (mat.shape[-1]
      == vec.shape[0])
  - f1_score: 46.951219512195124
    overall_score: 20.75
    precision: 38.5
    recall: 60.15625
- - cot: synthesized
    length: 4
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat: tensor
        out: tensor
        self: tensor
        vec: tensor
      msg: vector + matrix @ vector expected, got 4, 5, 6
      package: torch
    txt: (((mat[-1] == vec[-2]) or (len(vec) != 0 and mat.shape[-1] == len(vec)))
      or (len(out.shape) == 1)) and (len(mat.shape) == 2, len(self.shape) == 1, len(vec.shape)
      == 1, len(out.shape) == len(self.shape))
  - f1_score: 48.484848484848484
    overall_score: 16.75
    precision: 32.0
    recall: 100.0
- - cot: default
    length: 4
    target:
      choosen_dtype:
        alpha: number
        beta: number
        mat: Tensor
        out: Tensor
        self: Tensor
        vec: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in mat.shape) and all(i
      >= 0 for i in vec.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 4
    target:
      choosen_dtype:
        alpha: number
        beta: number
        mat: Tensor
        out: Tensor
        self: Tensor
        vec: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and mat.rank <= 7 and vec.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
