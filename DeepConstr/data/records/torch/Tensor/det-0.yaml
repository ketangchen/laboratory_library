args:
  dtype:
  - Tensor
  is_pos:
  - true
  name:
  - self
  required:
  - true
name: torch.Tensor.det
package: torch
pass_rate: 100
rules:
- - cot: The error is because the matrix for which the determinant needs to be calculated
      is not a square matrix. Let's see what the args were. The matrix is of shape
      [8, 6], which is not a square matrix. In order to calculate the determinant,
      the matrix should be a square matrix, i.e., number of rows should equal number
      of columns. Therefore, the constraint would be that the last two dimensions
      of the tensor should be equal.
    length: 1
    target:
      choosen_dtype:
        self: tensor
      msg: 'linalg.det: A must be batches of square matrices, but they are 3 by 7
        matrices'
      package: torch
    txt: self.shape[-1] == self.shape[-2]
  - f1_score: 66.66666666666667
    overall_score: 45.333333333333336
    precision: 100.0
    recall: 50.0
- - cot: 'The error message states that the input tensor must have at least 2 dimensions.
      Therefore, the constraint to prevent the error can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        self: tensor
      msg: 'linalg.det: The input tensor A must have at least 2 dimensions.'
      package: torch
    txt: self.ndim >= 2
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 1
    target:
      choosen_dtype:
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
