args:
  dtype:
  - Tensor
  - Optional[int]
  - int
  - Optional[str]
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - n
  - dim
  - norm
  - out
  required:
  - true
  - false
  - false
  - false
  - true
name: torch._C._fft.fft_hfft
package: torch
pass_rate: 10.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: int
        norm: str
        out: tensor
        self: tensor
      msg: Dimension out of range (expected to be in range of [-7, 6], but got 39)
      package: torch
    txt: (dim >= -len(self.shape)) and (dim >= -7 and dim < 6)
  - f1_score: 68.88633754305395
    overall_score: 100
    precision: 100.0
    recall: 52.53940455341506
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank==self.rank and all(out.shape[i]==self.shape[i] for i in range(out.rank))
  - f1_score: 67.90945406125165
    overall_score: 45.5
    precision: 85.0
    recall: 56.54101995565409
- - cot: 'To prevent the error "Dimension specified as 0 but tensor has no dimensions",
      the input tensor must have at least one dimension. Therefore, the constraint
      can be formulated as:'
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: Dimension specified as 0 but tensor has no dimensions
      package: torch
    txt: len(self.shape) > 0
  - f1_score: 96.55172413793103
    overall_score: 100
    precision: 100.0
    recall: 93.33333333333333
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: str
        out: tensor
        self: tensor
      msg: 'Invalid normalization mode: "zxLX"'
      package: torch
    txt: norm == "backward"
  - f1_score: 89.68609865470852
    overall_score: 100
    precision: 100.0
    recall: 81.30081300813008
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: None
        norm: None
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: (out.rank == self.rank) and (out.shape == self.shape)
  - f1_score: 42.4080056733118
    overall_score: 19.5
    precision: 36.0
    recall: 51.591257668711656
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: negative dimensions are not allowed
      package: torch
    txt: all(i >= 0 for i in self.shape) and all(i >= 0 for i in out.shape)
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
- - cot: default
    length: 2
    target:
      choosen_dtype:
        dim: int
        n: Optional[int]
        norm: Optional[str]
        out: Tensor
        self: Tensor
      msg: Too large tensor shape
      package: torch
    txt: self.rank <= 7 and out.rank <= 7
  - f1_score: -1
    overall_score: -1
    precision: -1
    recall: -1
